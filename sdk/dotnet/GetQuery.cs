// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Mssql
{
    public static class GetQuery
    {
        /// <summary>
        /// Retrieves arbitrary SQL query result.
        /// 
        /// &gt; **Note** This data source is meant to be an escape hatch for all cases not supported by the provider's data sources. Whenever possible, use dedicated data sources, which offer better plan, validation and error reporting.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Mssql = Pulumi.Mssql;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Mssql.GetDatabase.Invoke(new()
        ///     {
        ///         Name = "test",
        ///     });
        /// 
        ///     var column = Mssql.GetQuery.Invoke(new()
        ///     {
        ///         DatabaseId = test.Apply(getDatabaseResult =&gt; getDatabaseResult.Id),
        ///         Query = "SELECT [column_id], [name] FROM sys.columns WHERE [object_id] = OBJECT_ID('test_table')",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["columnNames"] = column.Apply(getQueryResult =&gt; getQueryResult.Results).Select(__item =&gt; __item.Name).ToList(),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetQueryResult> InvokeAsync(GetQueryArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetQueryResult>("mssql:index/getQuery:getQuery", args ?? new GetQueryArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves arbitrary SQL query result.
        /// 
        /// &gt; **Note** This data source is meant to be an escape hatch for all cases not supported by the provider's data sources. Whenever possible, use dedicated data sources, which offer better plan, validation and error reporting.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Mssql = Pulumi.Mssql;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Mssql.GetDatabase.Invoke(new()
        ///     {
        ///         Name = "test",
        ///     });
        /// 
        ///     var column = Mssql.GetQuery.Invoke(new()
        ///     {
        ///         DatabaseId = test.Apply(getDatabaseResult =&gt; getDatabaseResult.Id),
        ///         Query = "SELECT [column_id], [name] FROM sys.columns WHERE [object_id] = OBJECT_ID('test_table')",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["columnNames"] = column.Apply(getQueryResult =&gt; getQueryResult.Results).Select(__item =&gt; __item.Name).ToList(),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetQueryResult> Invoke(GetQueryInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetQueryResult>("mssql:index/getQuery:getQuery", args ?? new GetQueryInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetQueryArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of database. Can be retrieved using `mssql.Database` or `SELECT DB_ID('&lt;db_name&gt;')`.
        /// </summary>
        [Input("databaseId", required: true)]
        public string DatabaseId { get; set; } = null!;

        /// <summary>
        /// SQL query returning single result set, with any number of rows, where all columns are strings
        /// </summary>
        [Input("query", required: true)]
        public string Query { get; set; } = null!;

        public GetQueryArgs()
        {
        }
        public static new GetQueryArgs Empty => new GetQueryArgs();
    }

    public sealed class GetQueryInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of database. Can be retrieved using `mssql.Database` or `SELECT DB_ID('&lt;db_name&gt;')`.
        /// </summary>
        [Input("databaseId", required: true)]
        public Input<string> DatabaseId { get; set; } = null!;

        /// <summary>
        /// SQL query returning single result set, with any number of rows, where all columns are strings
        /// </summary>
        [Input("query", required: true)]
        public Input<string> Query { get; set; } = null!;

        public GetQueryInvokeArgs()
        {
        }
        public static new GetQueryInvokeArgs Empty => new GetQueryInvokeArgs();
    }


    [OutputType]
    public sealed class GetQueryResult
    {
        /// <summary>
        /// ID of database. Can be retrieved using `mssql.Database` or `SELECT DB_ID('&lt;db_name&gt;')`.
        /// </summary>
        public readonly string DatabaseId;
        public readonly string Id;
        /// <summary>
        /// SQL query returning single result set, with any number of rows, where all columns are strings
        /// </summary>
        public readonly string Query;
        /// <summary>
        /// Results of the SQL query, represented as list of maps, where the map key corresponds to column name and the value is the value of column in given row.
        /// </summary>
        public readonly ImmutableArray<ImmutableDictionary<string, string>> Results;

        [OutputConstructor]
        private GetQueryResult(
            string databaseId,

            string id,

            string query,

            ImmutableArray<ImmutableDictionary<string, string>> results)
        {
            DatabaseId = databaseId;
            Id = id;
            Query = query;
            Results = results;
        }
    }
}
