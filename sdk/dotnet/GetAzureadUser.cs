// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Mssql
{
    public static class GetAzureadUser
    {
        /// <summary>
        /// Obtains information about single Azure AD database user.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Mssql = Pulumi.Mssql;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleDatabase = Mssql.GetDatabase.Invoke(new()
        ///     {
        ///         Name = "example",
        ///     });
        /// 
        ///     var exampleAzureadUser = Mssql.GetAzureadUser.Invoke(new()
        ///     {
        ///         Name = "example",
        ///         DatabaseId = exampleDatabase.Apply(getDatabaseResult =&gt; getDatabaseResult.Id),
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["userObjectId"] = exampleAzureadUser.Apply(getAzureadUserResult =&gt; getAzureadUserResult.UserObjectId),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetAzureadUserResult> InvokeAsync(GetAzureadUserArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAzureadUserResult>("mssql:index/getAzureadUser:getAzureadUser", args ?? new GetAzureadUserArgs(), options.WithDefaults());

        /// <summary>
        /// Obtains information about single Azure AD database user.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Mssql = Pulumi.Mssql;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleDatabase = Mssql.GetDatabase.Invoke(new()
        ///     {
        ///         Name = "example",
        ///     });
        /// 
        ///     var exampleAzureadUser = Mssql.GetAzureadUser.Invoke(new()
        ///     {
        ///         Name = "example",
        ///         DatabaseId = exampleDatabase.Apply(getDatabaseResult =&gt; getDatabaseResult.Id),
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["userObjectId"] = exampleAzureadUser.Apply(getAzureadUserResult =&gt; getAzureadUserResult.UserObjectId),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetAzureadUserResult> Invoke(GetAzureadUserInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAzureadUserResult>("mssql:index/getAzureadUser:getAzureadUser", args ?? new GetAzureadUserInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAzureadUserArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of database. Can be retrieved using `mssql.Database` or `SELECT DB_ID('&lt;db_name&gt;')`.
        /// </summary>
        [Input("databaseId", required: true)]
        public string DatabaseId { get; set; } = null!;

        /// <summary>
        /// User name. Cannot be longer than 128 chars.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Azure AD object_id of the user. This can be either regular user or a group.
        /// </summary>
        [Input("userObjectId")]
        public string? UserObjectId { get; set; }

        public GetAzureadUserArgs()
        {
        }
        public static new GetAzureadUserArgs Empty => new GetAzureadUserArgs();
    }

    public sealed class GetAzureadUserInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of database. Can be retrieved using `mssql.Database` or `SELECT DB_ID('&lt;db_name&gt;')`.
        /// </summary>
        [Input("databaseId", required: true)]
        public Input<string> DatabaseId { get; set; } = null!;

        /// <summary>
        /// User name. Cannot be longer than 128 chars.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Azure AD object_id of the user. This can be either regular user or a group.
        /// </summary>
        [Input("userObjectId")]
        public Input<string>? UserObjectId { get; set; }

        public GetAzureadUserInvokeArgs()
        {
        }
        public static new GetAzureadUserInvokeArgs Empty => new GetAzureadUserInvokeArgs();
    }


    [OutputType]
    public sealed class GetAzureadUserResult
    {
        /// <summary>
        /// ID of database. Can be retrieved using `mssql.Database` or `SELECT DB_ID('&lt;db_name&gt;')`.
        /// </summary>
        public readonly string DatabaseId;
        /// <summary>
        /// `&lt;database_id&gt;/&lt;user_id&gt;`. User ID can be retrieved using `sys.database_principals` view.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// User name. Cannot be longer than 128 chars.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Azure AD object_id of the user. This can be either regular user or a group.
        /// </summary>
        public readonly string UserObjectId;

        [OutputConstructor]
        private GetAzureadUserResult(
            string databaseId,

            string id,

            string name,

            string userObjectId)
        {
            DatabaseId = databaseId;
            Id = id;
            Name = name;
            UserObjectId = userObjectId;
        }
    }
}
