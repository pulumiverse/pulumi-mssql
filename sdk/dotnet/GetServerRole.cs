// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Mssql
{
    public static class GetServerRole
    {
        /// <summary>
        /// Obtains information about single server role.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Mssql = Pulumi.Mssql;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var byName = Mssql.GetServerRole.Invoke(new()
        ///     {
        ///         Name = "example",
        ///     });
        /// 
        ///     var byId = Mssql.GetServerRole.Invoke(new()
        ///     {
        ///         Id = "8",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetServerRoleResult> InvokeAsync(GetServerRoleArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServerRoleResult>("mssql:index/getServerRole:getServerRole", args ?? new GetServerRoleArgs(), options.WithDefaults());

        /// <summary>
        /// Obtains information about single server role.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Mssql = Pulumi.Mssql;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var byName = Mssql.GetServerRole.Invoke(new()
        ///     {
        ///         Name = "example",
        ///     });
        /// 
        ///     var byId = Mssql.GetServerRole.Invoke(new()
        ///     {
        ///         Id = "8",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetServerRoleResult> Invoke(GetServerRoleInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServerRoleResult>("mssql:index/getServerRole:getServerRole", args ?? new GetServerRoleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServerRoleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the member principal
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// Name of the server principal
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetServerRoleArgs()
        {
        }
        public static new GetServerRoleArgs Empty => new GetServerRoleArgs();
    }

    public sealed class GetServerRoleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the member principal
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Name of the server principal
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetServerRoleInvokeArgs()
        {
        }
        public static new GetServerRoleInvokeArgs Empty => new GetServerRoleInvokeArgs();
    }


    [OutputType]
    public sealed class GetServerRoleResult
    {
        /// <summary>
        /// Role principal ID. Either `name` or `id` must be provided.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Set of role members
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServerRoleMemberResult> Members;
        /// <summary>
        /// Role name. Must follow [Regular Identifiers rules](https://docs.microsoft.com/en-us/sql/relational-databases/databases/database-identifiers#rules-for-regular-identifiers) and cannot be longer than 128 chars. Either `name` or `id` must be provided.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// ID of another server role or login owning this role. Can be retrieved using `mssql.ServerRole` or `mssql.SqlLogin`.
        /// </summary>
        public readonly string OwnerId;

        [OutputConstructor]
        private GetServerRoleResult(
            string id,

            ImmutableArray<Outputs.GetServerRoleMemberResult> members,

            string name,

            string ownerId)
        {
            Id = id;
            Members = members;
            Name = name;
            OwnerId = ownerId;
        }
    }
}
