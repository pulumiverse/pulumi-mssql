// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Mssql
{
    /// <summary>
    /// Allows execution of arbitrary SQL scripts to check state and apply desired state.
    /// 
    /// &gt; **Note** This resource is meant to be an escape hatch for all cases not supported by the provider's resources. Whenever possible, use dedicated resources, which offer better plan, validation and error reporting.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Mssql = Pulumi.Mssql;
    /// using Mssql = Pulumiverse.Mssql;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = Mssql.GetDatabase.Invoke(new()
    ///     {
    ///         Name = "test",
    ///     });
    /// 
    ///     var cdc = new Mssql.Script("cdc", new()
    ///     {
    ///         DatabaseId = test.Apply(getDatabaseResult =&gt; getDatabaseResult.Id),
    ///         ReadScript = $"SELECT COUNT(*) AS [is_enabled] FROM sys.change_tracking_databases WHERE database_id={test.Apply(getDatabaseResult =&gt; getDatabaseResult.Id)}",
    ///         DeleteScript = $"ALTER DATABASE [{test.Apply(getDatabaseResult =&gt; getDatabaseResult.Name)}] SET CHANGE_TRACKING = OFF",
    ///         UpdateScript = Output.Tuple(test, test).Apply(values =&gt;
    ///         {
    ///             var test = values.Item1;
    ///             var test1 = values.Item2;
    ///             return @$"IF (SELECT COUNT(*) FROM sys.change_tracking_databases WHERE database_id={test.Apply(getDatabaseResult =&gt; getDatabaseResult.Id)}) = 0
    ///   ALTER DATABASE [{test1.Name}] SET CHANGE_TRACKING = ON
    /// ";
    ///         }),
    ///         State = 
    ///         {
    ///             { "is_enabled", "1" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [MssqlResourceType("mssql:index/script:Script")]
    public partial class Script : global::Pulumi.CustomResource
    {
        [Output("createScript")]
        public Output<string?> CreateScript { get; private set; } = null!;

        /// <summary>
        /// ID of database. Can be retrieved using `mssql.Database` or `SELECT DB_ID('&lt;db_name&gt;')`.
        /// </summary>
        [Output("databaseId")]
        public Output<string> DatabaseId { get; private set; } = null!;

        /// <summary>
        /// SQL script executed when the resource is being destroyed. When not provided, no action will be taken during resource destruction.
        /// </summary>
        [Output("deleteScript")]
        public Output<string?> DeleteScript { get; private set; } = null!;

        /// <summary>
        /// SQL script returning current state of the DB. It must return single-row result set where column names match the keys of `state` map and all values are strings that will be compared against `state` to determine if the resource state matches DB state.
        /// </summary>
        [Output("readScript")]
        public Output<string> ReadScript { get; private set; } = null!;

        /// <summary>
        /// Desired state of the DB. It is arbitrary map of string values that will be compared against the values returned by the `read_script`.
        /// </summary>
        [Output("state")]
        public Output<ImmutableDictionary<string, string>> State { get; private set; } = null!;

        /// <summary>
        /// SQL script executed when the desired state specified in `state` attribute does not match the state returned by `read_script`
        /// </summary>
        [Output("updateScript")]
        public Output<string> UpdateScript { get; private set; } = null!;


        /// <summary>
        /// Create a Script resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Script(string name, ScriptArgs args, CustomResourceOptions? options = null)
            : base("mssql:index/script:Script", name, args ?? new ScriptArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Script(string name, Input<string> id, ScriptState? state = null, CustomResourceOptions? options = null)
            : base("mssql:index/script:Script", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-mssql",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Script resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Script Get(string name, Input<string> id, ScriptState? state = null, CustomResourceOptions? options = null)
        {
            return new Script(name, id, state, options);
        }
    }

    public sealed class ScriptArgs : global::Pulumi.ResourceArgs
    {
        [Input("createScript")]
        public Input<string>? CreateScript { get; set; }

        /// <summary>
        /// ID of database. Can be retrieved using `mssql.Database` or `SELECT DB_ID('&lt;db_name&gt;')`.
        /// </summary>
        [Input("databaseId", required: true)]
        public Input<string> DatabaseId { get; set; } = null!;

        /// <summary>
        /// SQL script executed when the resource is being destroyed. When not provided, no action will be taken during resource destruction.
        /// </summary>
        [Input("deleteScript")]
        public Input<string>? DeleteScript { get; set; }

        /// <summary>
        /// SQL script returning current state of the DB. It must return single-row result set where column names match the keys of `state` map and all values are strings that will be compared against `state` to determine if the resource state matches DB state.
        /// </summary>
        [Input("readScript", required: true)]
        public Input<string> ReadScript { get; set; } = null!;

        [Input("state", required: true)]
        private InputMap<string>? _state;

        /// <summary>
        /// Desired state of the DB. It is arbitrary map of string values that will be compared against the values returned by the `read_script`.
        /// </summary>
        public InputMap<string> State
        {
            get => _state ?? (_state = new InputMap<string>());
            set => _state = value;
        }

        /// <summary>
        /// SQL script executed when the desired state specified in `state` attribute does not match the state returned by `read_script`
        /// </summary>
        [Input("updateScript", required: true)]
        public Input<string> UpdateScript { get; set; } = null!;

        public ScriptArgs()
        {
        }
        public static new ScriptArgs Empty => new ScriptArgs();
    }

    public sealed class ScriptState : global::Pulumi.ResourceArgs
    {
        [Input("createScript")]
        public Input<string>? CreateScript { get; set; }

        /// <summary>
        /// ID of database. Can be retrieved using `mssql.Database` or `SELECT DB_ID('&lt;db_name&gt;')`.
        /// </summary>
        [Input("databaseId")]
        public Input<string>? DatabaseId { get; set; }

        /// <summary>
        /// SQL script executed when the resource is being destroyed. When not provided, no action will be taken during resource destruction.
        /// </summary>
        [Input("deleteScript")]
        public Input<string>? DeleteScript { get; set; }

        /// <summary>
        /// SQL script returning current state of the DB. It must return single-row result set where column names match the keys of `state` map and all values are strings that will be compared against `state` to determine if the resource state matches DB state.
        /// </summary>
        [Input("readScript")]
        public Input<string>? ReadScript { get; set; }

        [Input("state")]
        private InputMap<string>? _state;

        /// <summary>
        /// Desired state of the DB. It is arbitrary map of string values that will be compared against the values returned by the `read_script`.
        /// </summary>
        public InputMap<string> State
        {
            get => _state ?? (_state = new InputMap<string>());
            set => _state = value;
        }

        /// <summary>
        /// SQL script executed when the desired state specified in `state` attribute does not match the state returned by `read_script`
        /// </summary>
        [Input("updateScript")]
        public Input<string>? UpdateScript { get; set; }

        public ScriptState()
        {
        }
        public static new ScriptState Empty => new ScriptState();
    }
}
