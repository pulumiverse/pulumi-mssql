// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Mssql
{
    public static class GetSchemaPermissions
    {
        /// <summary>
        /// Returns all permissions granted in a schema to given principal
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Mssql = Pulumi.Mssql;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleDatabase = Mssql.GetDatabase.Invoke(new()
        ///     {
        ///         Name = "example",
        ///     });
        /// 
        ///     var exampleSqlUser = Mssql.GetSqlUser.Invoke(new()
        ///     {
        ///         Name = "example_user",
        ///         DatabaseId = exampleDatabase.Apply(getDatabaseResult =&gt; getDatabaseResult.Id),
        ///     });
        /// 
        ///     var exampleSchema = Mssql.GetSchema.Invoke(new()
        ///     {
        ///         Name = "example_schema",
        ///         DatabaseId = exampleDatabase.Apply(getDatabaseResult =&gt; getDatabaseResult.Id),
        ///     });
        /// 
        ///     var exampleSchemaPermissions = Mssql.GetSchemaPermissions.Invoke(new()
        ///     {
        ///         SchemaId = exampleSchema.Apply(getSchemaResult =&gt; getSchemaResult.Id),
        ///         PrincipalId = exampleSqlUser.Apply(getSqlUserResult =&gt; getSqlUserResult.Id),
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["permissions"] = exampleSchemaPermissions.Apply(getSchemaPermissionsResult =&gt; getSchemaPermissionsResult.Permissions),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSchemaPermissionsResult> InvokeAsync(GetSchemaPermissionsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSchemaPermissionsResult>("mssql:index/getSchemaPermissions:getSchemaPermissions", args ?? new GetSchemaPermissionsArgs(), options.WithDefaults());

        /// <summary>
        /// Returns all permissions granted in a schema to given principal
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Mssql = Pulumi.Mssql;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleDatabase = Mssql.GetDatabase.Invoke(new()
        ///     {
        ///         Name = "example",
        ///     });
        /// 
        ///     var exampleSqlUser = Mssql.GetSqlUser.Invoke(new()
        ///     {
        ///         Name = "example_user",
        ///         DatabaseId = exampleDatabase.Apply(getDatabaseResult =&gt; getDatabaseResult.Id),
        ///     });
        /// 
        ///     var exampleSchema = Mssql.GetSchema.Invoke(new()
        ///     {
        ///         Name = "example_schema",
        ///         DatabaseId = exampleDatabase.Apply(getDatabaseResult =&gt; getDatabaseResult.Id),
        ///     });
        /// 
        ///     var exampleSchemaPermissions = Mssql.GetSchemaPermissions.Invoke(new()
        ///     {
        ///         SchemaId = exampleSchema.Apply(getSchemaResult =&gt; getSchemaResult.Id),
        ///         PrincipalId = exampleSqlUser.Apply(getSqlUserResult =&gt; getSqlUserResult.Id),
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["permissions"] = exampleSchemaPermissions.Apply(getSchemaPermissionsResult =&gt; getSchemaPermissionsResult.Permissions),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetSchemaPermissionsResult> Invoke(GetSchemaPermissionsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSchemaPermissionsResult>("mssql:index/getSchemaPermissions:getSchemaPermissions", args ?? new GetSchemaPermissionsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSchemaPermissionsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// `&lt;database_id&gt;/&lt;principal_id&gt;`. Can be retrieved using `mssql.DatabaseRole`, `mssql.SqlUser`, `mssql.AzureadUser` or `mssql.AzureadServicePrincipal`.
        /// </summary>
        [Input("principalId", required: true)]
        public string PrincipalId { get; set; } = null!;

        /// <summary>
        /// `&lt;database_id&gt;/&lt;schema_id&gt;`. Can be retrieved using `mssql.Schema`.
        /// </summary>
        [Input("schemaId", required: true)]
        public string SchemaId { get; set; } = null!;

        public GetSchemaPermissionsArgs()
        {
        }
        public static new GetSchemaPermissionsArgs Empty => new GetSchemaPermissionsArgs();
    }

    public sealed class GetSchemaPermissionsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// `&lt;database_id&gt;/&lt;principal_id&gt;`. Can be retrieved using `mssql.DatabaseRole`, `mssql.SqlUser`, `mssql.AzureadUser` or `mssql.AzureadServicePrincipal`.
        /// </summary>
        [Input("principalId", required: true)]
        public Input<string> PrincipalId { get; set; } = null!;

        /// <summary>
        /// `&lt;database_id&gt;/&lt;schema_id&gt;`. Can be retrieved using `mssql.Schema`.
        /// </summary>
        [Input("schemaId", required: true)]
        public Input<string> SchemaId { get; set; } = null!;

        public GetSchemaPermissionsInvokeArgs()
        {
        }
        public static new GetSchemaPermissionsInvokeArgs Empty => new GetSchemaPermissionsInvokeArgs();
    }


    [OutputType]
    public sealed class GetSchemaPermissionsResult
    {
        /// <summary>
        /// `&lt;database_id&gt;/&lt;schema_id&gt;/&lt;principal_id&gt;`.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Set of permissions granted to the principal
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSchemaPermissionsPermissionResult> Permissions;
        /// <summary>
        /// `&lt;database_id&gt;/&lt;principal_id&gt;`. Can be retrieved using `mssql.DatabaseRole`, `mssql.SqlUser`, `mssql.AzureadUser` or `mssql.AzureadServicePrincipal`.
        /// </summary>
        public readonly string PrincipalId;
        /// <summary>
        /// `&lt;database_id&gt;/&lt;schema_id&gt;`. Can be retrieved using `mssql.Schema`.
        /// </summary>
        public readonly string SchemaId;

        [OutputConstructor]
        private GetSchemaPermissionsResult(
            string id,

            ImmutableArray<Outputs.GetSchemaPermissionsPermissionResult> permissions,

            string principalId,

            string schemaId)
        {
            Id = id;
            Permissions = permissions;
            PrincipalId = principalId;
            SchemaId = schemaId;
        }
    }
}
