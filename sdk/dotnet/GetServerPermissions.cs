// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Mssql
{
    public static class GetServerPermissions
    {
        /// <summary>
        /// Returns all permissions grated to given principal
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Mssql = Pulumi.Mssql;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleSqlLogin = Mssql.GetSqlLogin.Invoke(new()
        ///     {
        ///         Name = "example_login",
        ///     });
        /// 
        ///     var exampleServerPermissions = Mssql.GetServerPermissions.Invoke(new()
        ///     {
        ///         PrincipalId = exampleSqlLogin.Apply(getSqlLoginResult =&gt; getSqlLoginResult.PrincipalId),
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["permissions"] = exampleServerPermissions.Apply(getServerPermissionsResult =&gt; getServerPermissionsResult.Permissions),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetServerPermissionsResult> InvokeAsync(GetServerPermissionsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServerPermissionsResult>("mssql:index/getServerPermissions:getServerPermissions", args ?? new GetServerPermissionsArgs(), options.WithDefaults());

        /// <summary>
        /// Returns all permissions grated to given principal
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Mssql = Pulumi.Mssql;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleSqlLogin = Mssql.GetSqlLogin.Invoke(new()
        ///     {
        ///         Name = "example_login",
        ///     });
        /// 
        ///     var exampleServerPermissions = Mssql.GetServerPermissions.Invoke(new()
        ///     {
        ///         PrincipalId = exampleSqlLogin.Apply(getSqlLoginResult =&gt; getSqlLoginResult.PrincipalId),
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["permissions"] = exampleServerPermissions.Apply(getServerPermissionsResult =&gt; getServerPermissionsResult.Permissions),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetServerPermissionsResult> Invoke(GetServerPermissionsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServerPermissionsResult>("mssql:index/getServerPermissions:getServerPermissions", args ?? new GetServerPermissionsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServerPermissionsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the principal who will be granted `permission`. Can be retrieved using `mssql.ServerRole` or `mssql.SqlLogin`.
        /// </summary>
        [Input("principalId", required: true)]
        public string PrincipalId { get; set; } = null!;

        public GetServerPermissionsArgs()
        {
        }
        public static new GetServerPermissionsArgs Empty => new GetServerPermissionsArgs();
    }

    public sealed class GetServerPermissionsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the principal who will be granted `permission`. Can be retrieved using `mssql.ServerRole` or `mssql.SqlLogin`.
        /// </summary>
        [Input("principalId", required: true)]
        public Input<string> PrincipalId { get; set; } = null!;

        public GetServerPermissionsInvokeArgs()
        {
        }
        public static new GetServerPermissionsInvokeArgs Empty => new GetServerPermissionsInvokeArgs();
    }


    [OutputType]
    public sealed class GetServerPermissionsResult
    {
        /// <summary>
        /// Equals to `principal_id`.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Set of permissions granted to the principal
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServerPermissionsPermissionResult> Permissions;
        /// <summary>
        /// ID of the principal who will be granted `permission`. Can be retrieved using `mssql.ServerRole` or `mssql.SqlLogin`.
        /// </summary>
        public readonly string PrincipalId;

        [OutputConstructor]
        private GetServerPermissionsResult(
            string id,

            ImmutableArray<Outputs.GetServerPermissionsPermissionResult> permissions,

            string principalId)
        {
            Id = id;
            Permissions = permissions;
            PrincipalId = principalId;
        }
    }
}
