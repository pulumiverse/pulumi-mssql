// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Mssql
{
    /// <summary>
    /// Manages single login.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Mssql = Pulumi.Mssql;
    /// using Mssql = Pulumiverse.Mssql;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleDatabase = Mssql.GetDatabase.Invoke(new()
    ///     {
    ///         Name = "example",
    ///     });
    /// 
    ///     var exampleSqlLogin = new Mssql.SqlLogin("exampleSqlLogin", new()
    ///     {
    ///         Password = "Str0ngPa$$word12",
    ///         MustChangePassword = true,
    ///         DefaultDatabaseId = exampleDatabase.Apply(getDatabaseResult =&gt; getDatabaseResult.Id),
    ///         DefaultLanguage = "english",
    ///         CheckPasswordExpiration = true,
    ///         CheckPasswordPolicy = true,
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["loginId"] = exampleSqlLogin.Id,
    ///     };
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// import using login ID - can be retrieved using `SELECT SUSER_SID('&lt;login_name&gt;')`
    /// 
    /// ```sh
    ///  $ pulumi import mssql:index/sqlLogin:SqlLogin example 0x27578D8516843E4094EFA2CEED085C82
    /// ```
    /// </summary>
    [MssqlResourceType("mssql:index/sqlLogin:SqlLogin")]
    public partial class SqlLogin : global::Pulumi.CustomResource
    {
        /// <summary>
        /// When `true`, password expiration policy is enforced for this login. Defaults to `false`. -&gt; **Note** In case of Azure
        /// SQL, which does not support this feature, the flag will be ignored.
        /// </summary>
        [Output("checkPasswordExpiration")]
        public Output<bool?> CheckPasswordExpiration { get; private set; } = null!;

        /// <summary>
        /// When `true`, the Windows password policies of the computer on which SQL Server is running are enforced on this login.
        /// Defaults to `true`. -&gt; **Note** In case of Azure SQL, which does not support this feature, the flag will be ignored.
        /// </summary>
        [Output("checkPasswordPolicy")]
        public Output<bool?> CheckPasswordPolicy { get; private set; } = null!;

        /// <summary>
        /// ID of login's default DB. The ID can be retrieved using `mssql_database` data resource. Defaults to ID of `master`. -&gt;
        /// **Note** In case of Azure SQL, which does not support this feature, the flag will be ignored.
        /// </summary>
        [Output("defaultDatabaseId")]
        public Output<string?> DefaultDatabaseId { get; private set; } = null!;

        /// <summary>
        /// Default language assigned to login. Defaults to current default language of the server. If the default language of the
        /// server is later changed, the default language of the login remains unchanged. -&gt; **Note** In case of Azure SQL, which
        /// does not support this feature, the flag will be ignored.
        /// </summary>
        [Output("defaultLanguage")]
        public Output<string?> DefaultLanguage { get; private set; } = null!;

        /// <summary>
        /// When true, password change will be forced on first logon. Defaults to `false`. -&gt; **Note** After password is changed,
        /// this flag is being reset to `false`, which will show as changes in Terraform plan. Use `ignore_changes` block to prevent
        /// this behavior. -&gt; **Note** In case of Azure SQL, which does not support this feature, the flag will be ignored.
        /// </summary>
        [Output("mustChangePassword")]
        public Output<bool?> MustChangePassword { get; private set; } = null!;

        /// <summary>
        /// Login name. Must follow [Regular Identifiers rules](https://docs.microsoft.com/en-us/sql/relational-databases/databases/database-identifiers#rules-for-regular-identifiers) and cannot contain `\`
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Password for the login. Must follow strong password policies defined for SQL server. Passwords are case-sensitive, length must be 8-128 chars, can include all characters except `'` or `name`.
        /// </summary>
        [Output("password")]
        public Output<string> Password { get; private set; } = null!;

        /// <summary>
        /// ID used to reference SQL Login in other resources, e.g. `server_role`. Can be retrieved from `sys.sql_logins`.
        /// </summary>
        [Output("principalId")]
        public Output<string> PrincipalId { get; private set; } = null!;


        /// <summary>
        /// Create a SqlLogin resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SqlLogin(string name, SqlLoginArgs args, CustomResourceOptions? options = null)
            : base("mssql:index/sqlLogin:SqlLogin", name, args ?? new SqlLoginArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SqlLogin(string name, Input<string> id, SqlLoginState? state = null, CustomResourceOptions? options = null)
            : base("mssql:index/sqlLogin:SqlLogin", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-mssql",
                AdditionalSecretOutputs =
                {
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SqlLogin resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SqlLogin Get(string name, Input<string> id, SqlLoginState? state = null, CustomResourceOptions? options = null)
        {
            return new SqlLogin(name, id, state, options);
        }
    }

    public sealed class SqlLoginArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// When `true`, password expiration policy is enforced for this login. Defaults to `false`. -&gt; **Note** In case of Azure
        /// SQL, which does not support this feature, the flag will be ignored.
        /// </summary>
        [Input("checkPasswordExpiration")]
        public Input<bool>? CheckPasswordExpiration { get; set; }

        /// <summary>
        /// When `true`, the Windows password policies of the computer on which SQL Server is running are enforced on this login.
        /// Defaults to `true`. -&gt; **Note** In case of Azure SQL, which does not support this feature, the flag will be ignored.
        /// </summary>
        [Input("checkPasswordPolicy")]
        public Input<bool>? CheckPasswordPolicy { get; set; }

        /// <summary>
        /// ID of login's default DB. The ID can be retrieved using `mssql_database` data resource. Defaults to ID of `master`. -&gt;
        /// **Note** In case of Azure SQL, which does not support this feature, the flag will be ignored.
        /// </summary>
        [Input("defaultDatabaseId")]
        public Input<string>? DefaultDatabaseId { get; set; }

        /// <summary>
        /// Default language assigned to login. Defaults to current default language of the server. If the default language of the
        /// server is later changed, the default language of the login remains unchanged. -&gt; **Note** In case of Azure SQL, which
        /// does not support this feature, the flag will be ignored.
        /// </summary>
        [Input("defaultLanguage")]
        public Input<string>? DefaultLanguage { get; set; }

        /// <summary>
        /// When true, password change will be forced on first logon. Defaults to `false`. -&gt; **Note** After password is changed,
        /// this flag is being reset to `false`, which will show as changes in Terraform plan. Use `ignore_changes` block to prevent
        /// this behavior. -&gt; **Note** In case of Azure SQL, which does not support this feature, the flag will be ignored.
        /// </summary>
        [Input("mustChangePassword")]
        public Input<bool>? MustChangePassword { get; set; }

        /// <summary>
        /// Login name. Must follow [Regular Identifiers rules](https://docs.microsoft.com/en-us/sql/relational-databases/databases/database-identifiers#rules-for-regular-identifiers) and cannot contain `\`
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("password", required: true)]
        private Input<string>? _password;

        /// <summary>
        /// Password for the login. Must follow strong password policies defined for SQL server. Passwords are case-sensitive, length must be 8-128 chars, can include all characters except `'` or `name`.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public SqlLoginArgs()
        {
        }
        public static new SqlLoginArgs Empty => new SqlLoginArgs();
    }

    public sealed class SqlLoginState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// When `true`, password expiration policy is enforced for this login. Defaults to `false`. -&gt; **Note** In case of Azure
        /// SQL, which does not support this feature, the flag will be ignored.
        /// </summary>
        [Input("checkPasswordExpiration")]
        public Input<bool>? CheckPasswordExpiration { get; set; }

        /// <summary>
        /// When `true`, the Windows password policies of the computer on which SQL Server is running are enforced on this login.
        /// Defaults to `true`. -&gt; **Note** In case of Azure SQL, which does not support this feature, the flag will be ignored.
        /// </summary>
        [Input("checkPasswordPolicy")]
        public Input<bool>? CheckPasswordPolicy { get; set; }

        /// <summary>
        /// ID of login's default DB. The ID can be retrieved using `mssql_database` data resource. Defaults to ID of `master`. -&gt;
        /// **Note** In case of Azure SQL, which does not support this feature, the flag will be ignored.
        /// </summary>
        [Input("defaultDatabaseId")]
        public Input<string>? DefaultDatabaseId { get; set; }

        /// <summary>
        /// Default language assigned to login. Defaults to current default language of the server. If the default language of the
        /// server is later changed, the default language of the login remains unchanged. -&gt; **Note** In case of Azure SQL, which
        /// does not support this feature, the flag will be ignored.
        /// </summary>
        [Input("defaultLanguage")]
        public Input<string>? DefaultLanguage { get; set; }

        /// <summary>
        /// When true, password change will be forced on first logon. Defaults to `false`. -&gt; **Note** After password is changed,
        /// this flag is being reset to `false`, which will show as changes in Terraform plan. Use `ignore_changes` block to prevent
        /// this behavior. -&gt; **Note** In case of Azure SQL, which does not support this feature, the flag will be ignored.
        /// </summary>
        [Input("mustChangePassword")]
        public Input<bool>? MustChangePassword { get; set; }

        /// <summary>
        /// Login name. Must follow [Regular Identifiers rules](https://docs.microsoft.com/en-us/sql/relational-databases/databases/database-identifiers#rules-for-regular-identifiers) and cannot contain `\`
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// Password for the login. Must follow strong password policies defined for SQL server. Passwords are case-sensitive, length must be 8-128 chars, can include all characters except `'` or `name`.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// ID used to reference SQL Login in other resources, e.g. `server_role`. Can be retrieved from `sys.sql_logins`.
        /// </summary>
        [Input("principalId")]
        public Input<string>? PrincipalId { get; set; }

        public SqlLoginState()
        {
        }
        public static new SqlLoginState Empty => new SqlLoginState();
    }
}
