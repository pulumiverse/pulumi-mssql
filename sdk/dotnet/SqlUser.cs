// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Mssql
{
    /// <summary>
    /// Manages database-level user, based on SQL login.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Mssql = Pulumi.Mssql;
    /// using Mssql = Pulumiverse.Mssql;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleDatabase = Mssql.GetDatabase.Invoke(new()
    ///     {
    ///         Name = "example",
    ///     });
    /// 
    ///     var exampleSqlLogin = new Mssql.SqlLogin("exampleSqlLogin", new()
    ///     {
    ///         Password = "Str0ngPa$$word12",
    ///         MustChangePassword = true,
    ///         DefaultDatabaseId = exampleDatabase.Apply(getDatabaseResult =&gt; getDatabaseResult.Id),
    ///         DefaultLanguage = "english",
    ///         CheckPasswordExpiration = true,
    ///         CheckPasswordPolicy = true,
    ///     });
    /// 
    ///     var exampleSqlUser = new Mssql.SqlUser("exampleSqlUser", new()
    ///     {
    ///         DatabaseId = exampleDatabase.Apply(getDatabaseResult =&gt; getDatabaseResult.Id),
    ///         LoginId = exampleSqlLogin.Id,
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["userId"] = exampleSqlUser.Id,
    ///     };
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// import using &lt;db_id&gt;/&lt;user_id&gt; - can be retrieved using `SELECT CONCAT(DB_ID(), '/', DATABASE_PRINCIPAL_ID('&lt;username&gt;'))`
    /// 
    /// ```sh
    ///  $ pulumi import mssql:index/sqlUser:SqlUser example '7/5'
    /// ```
    /// </summary>
    [MssqlResourceType("mssql:index/sqlUser:SqlUser")]
    public partial class SqlUser : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ID of database. Can be retrieved using `mssql.Database` or `SELECT DB_ID('&lt;db_name&gt;')`. Defaults to ID of `master`.
        /// </summary>
        [Output("databaseId")]
        public Output<string> DatabaseId { get; private set; } = null!;

        /// <summary>
        /// SID of SQL login. Can be retrieved using `mssql.SqlLogin` or `SELECT SUSER_SID('&lt;login_name&gt;')`.
        /// </summary>
        [Output("loginId")]
        public Output<string> LoginId { get; private set; } = null!;

        /// <summary>
        /// User name. Cannot be longer than 128 chars.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a SqlUser resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SqlUser(string name, SqlUserArgs args, CustomResourceOptions? options = null)
            : base("mssql:index/sqlUser:SqlUser", name, args ?? new SqlUserArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SqlUser(string name, Input<string> id, SqlUserState? state = null, CustomResourceOptions? options = null)
            : base("mssql:index/sqlUser:SqlUser", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/pulumi-mssql",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SqlUser resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SqlUser Get(string name, Input<string> id, SqlUserState? state = null, CustomResourceOptions? options = null)
        {
            return new SqlUser(name, id, state, options);
        }
    }

    public sealed class SqlUserArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of database. Can be retrieved using `mssql.Database` or `SELECT DB_ID('&lt;db_name&gt;')`. Defaults to ID of `master`.
        /// </summary>
        [Input("databaseId")]
        public Input<string>? DatabaseId { get; set; }

        /// <summary>
        /// SID of SQL login. Can be retrieved using `mssql.SqlLogin` or `SELECT SUSER_SID('&lt;login_name&gt;')`.
        /// </summary>
        [Input("loginId", required: true)]
        public Input<string> LoginId { get; set; } = null!;

        /// <summary>
        /// User name. Cannot be longer than 128 chars.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public SqlUserArgs()
        {
        }
        public static new SqlUserArgs Empty => new SqlUserArgs();
    }

    public sealed class SqlUserState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of database. Can be retrieved using `mssql.Database` or `SELECT DB_ID('&lt;db_name&gt;')`. Defaults to ID of `master`.
        /// </summary>
        [Input("databaseId")]
        public Input<string>? DatabaseId { get; set; }

        /// <summary>
        /// SID of SQL login. Can be retrieved using `mssql.SqlLogin` or `SELECT SUSER_SID('&lt;login_name&gt;')`.
        /// </summary>
        [Input("loginId")]
        public Input<string>? LoginId { get; set; }

        /// <summary>
        /// User name. Cannot be longer than 128 chars.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public SqlUserState()
        {
        }
        public static new SqlUserState Empty => new SqlUserState();
    }
}
