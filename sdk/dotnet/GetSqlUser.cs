// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Mssql
{
    public static class GetSqlUser
    {
        /// <summary>
        /// Obtains information about single SQL database user.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Mssql = Pulumi.Mssql;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var master = Mssql.GetDatabase.Invoke(new()
        ///     {
        ///         Name = "master",
        ///     });
        /// 
        ///     var example = Mssql.GetSqlUser.Invoke(new()
        ///     {
        ///         Name = "dbo",
        ///         DatabaseId = master.Apply(getDatabaseResult =&gt; getDatabaseResult.Id),
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getSqlUserResult =&gt; getSqlUserResult.Id),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetSqlUserResult> InvokeAsync(GetSqlUserArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSqlUserResult>("mssql:index/getSqlUser:getSqlUser", args ?? new GetSqlUserArgs(), options.WithDefaults());

        /// <summary>
        /// Obtains information about single SQL database user.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Mssql = Pulumi.Mssql;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var master = Mssql.GetDatabase.Invoke(new()
        ///     {
        ///         Name = "master",
        ///     });
        /// 
        ///     var example = Mssql.GetSqlUser.Invoke(new()
        ///     {
        ///         Name = "dbo",
        ///         DatabaseId = master.Apply(getDatabaseResult =&gt; getDatabaseResult.Id),
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["id"] = example.Apply(getSqlUserResult =&gt; getSqlUserResult.Id),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetSqlUserResult> Invoke(GetSqlUserInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSqlUserResult>("mssql:index/getSqlUser:getSqlUser", args ?? new GetSqlUserInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSqlUserArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of database. Can be retrieved using `mssql.Database` or `SELECT DB_ID('&lt;db_name&gt;')`.
        /// </summary>
        [Input("databaseId")]
        public string? DatabaseId { get; set; }

        /// <summary>
        /// User name. Cannot be longer than 128 chars.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetSqlUserArgs()
        {
        }
        public static new GetSqlUserArgs Empty => new GetSqlUserArgs();
    }

    public sealed class GetSqlUserInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of database. Can be retrieved using `mssql.Database` or `SELECT DB_ID('&lt;db_name&gt;')`.
        /// </summary>
        [Input("databaseId")]
        public Input<string>? DatabaseId { get; set; }

        /// <summary>
        /// User name. Cannot be longer than 128 chars.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetSqlUserInvokeArgs()
        {
        }
        public static new GetSqlUserInvokeArgs Empty => new GetSqlUserInvokeArgs();
    }


    [OutputType]
    public sealed class GetSqlUserResult
    {
        /// <summary>
        /// ID of database. Can be retrieved using `mssql.Database` or `SELECT DB_ID('&lt;db_name&gt;')`.
        /// </summary>
        public readonly string DatabaseId;
        /// <summary>
        /// `&lt;database_id&gt;/&lt;user_id&gt;`. User ID can be retrieved using `SELECT DATABASE_PRINCIPAL_ID('&lt;user_name&gt;')`.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// SID of SQL login. Can be retrieved using `mssql.SqlLogin` or `SELECT SUSER_SID('&lt;login_name&gt;')`.
        /// </summary>
        public readonly string LoginId;
        /// <summary>
        /// User name. Cannot be longer than 128 chars.
        /// </summary>
        public readonly string Name;

        [OutputConstructor]
        private GetSqlUserResult(
            string databaseId,

            string id,

            string loginId,

            string name)
        {
            DatabaseId = databaseId;
            Id = id;
            LoginId = loginId;
            Name = name;
        }
    }
}
