// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Grants database-level permission.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mssql from "@pulumi/mssql";
 * import * as mssql from "@pulumiverse/mssql";
 *
 * const exampleDatabase = mssql.getDatabase({
 *     name: "example",
 * });
 * const exampleSqlUser = exampleDatabase.then(exampleDatabase => mssql.getSqlUser({
 *     name: "example_user",
 *     databaseId: exampleDatabase.id,
 * }));
 * const exampleSchema = exampleDatabase.then(exampleDatabase => mssql.getSchema({
 *     name: "example_schema",
 *     databaseId: exampleDatabase.id,
 * }));
 * const deleteToExample = new mssql.SchemaPermission("deleteToExample", {
 *     schemaId: exampleSchema.then(exampleSchema => exampleSchema.id),
 *     principalId: exampleSqlUser.then(exampleSqlUser => exampleSqlUser.id),
 *     permission: "DELETE",
 * });
 * ```
 *
 * ## Import
 *
 * import using <db_id>/<schema_id>/<principal_id>/<permission> - can be retrieved using `SELECT CONCAT(DB_ID(), '/', SCHEMA_ID('<schema_name>'), '/', DATABASE_PRINCIPAL_ID('<principal_name>'), '/DELETE')`
 *
 * ```sh
 * $ pulumi import mssql:index/schemaPermission:SchemaPermission example '7/5/8/DELETE'
 * ```
 */
export class SchemaPermission extends pulumi.CustomResource {
    /**
     * Get an existing SchemaPermission resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SchemaPermissionState, opts?: pulumi.CustomResourceOptions): SchemaPermission {
        return new SchemaPermission(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mssql:index/schemaPermission:SchemaPermission';

    /**
     * Returns true if the given object is an instance of SchemaPermission.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SchemaPermission {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SchemaPermission.__pulumiType;
    }

    /**
     * Name of schema SQL permission. For full list of supported permissions, see [docs](https://learn.microsoft.com/en-us/sql/t-sql/statements/grant-schema-permissions-transact-sql?view=azuresqldb-current#remarks)
     */
    public readonly permission!: pulumi.Output<string>;
    /**
     * `<database_id>/<principal_id>`. Can be retrieved using `mssql.DatabaseRole`, `mssql.SqlUser`, `mssql.AzureadUser` or `mssql.AzureadServicePrincipal`.
     */
    public readonly principalId!: pulumi.Output<string>;
    /**
     * `<database_id>/<schema_id>`. Can be retrieved using `mssql.Schema`.
     */
    public readonly schemaId!: pulumi.Output<string>;
    /**
     * When set to `true`, `principalId` will be allowed to grant the `permission` to other principals. Defaults to `false`.
     */
    public readonly withGrantOption!: pulumi.Output<boolean>;

    /**
     * Create a SchemaPermission resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SchemaPermissionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SchemaPermissionArgs | SchemaPermissionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SchemaPermissionState | undefined;
            resourceInputs["permission"] = state ? state.permission : undefined;
            resourceInputs["principalId"] = state ? state.principalId : undefined;
            resourceInputs["schemaId"] = state ? state.schemaId : undefined;
            resourceInputs["withGrantOption"] = state ? state.withGrantOption : undefined;
        } else {
            const args = argsOrState as SchemaPermissionArgs | undefined;
            if ((!args || args.permission === undefined) && !opts.urn) {
                throw new Error("Missing required property 'permission'");
            }
            if ((!args || args.principalId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'principalId'");
            }
            if ((!args || args.schemaId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schemaId'");
            }
            resourceInputs["permission"] = args ? args.permission : undefined;
            resourceInputs["principalId"] = args ? args.principalId : undefined;
            resourceInputs["schemaId"] = args ? args.schemaId : undefined;
            resourceInputs["withGrantOption"] = args ? args.withGrantOption : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SchemaPermission.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SchemaPermission resources.
 */
export interface SchemaPermissionState {
    /**
     * Name of schema SQL permission. For full list of supported permissions, see [docs](https://learn.microsoft.com/en-us/sql/t-sql/statements/grant-schema-permissions-transact-sql?view=azuresqldb-current#remarks)
     */
    permission?: pulumi.Input<string>;
    /**
     * `<database_id>/<principal_id>`. Can be retrieved using `mssql.DatabaseRole`, `mssql.SqlUser`, `mssql.AzureadUser` or `mssql.AzureadServicePrincipal`.
     */
    principalId?: pulumi.Input<string>;
    /**
     * `<database_id>/<schema_id>`. Can be retrieved using `mssql.Schema`.
     */
    schemaId?: pulumi.Input<string>;
    /**
     * When set to `true`, `principalId` will be allowed to grant the `permission` to other principals. Defaults to `false`.
     */
    withGrantOption?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a SchemaPermission resource.
 */
export interface SchemaPermissionArgs {
    /**
     * Name of schema SQL permission. For full list of supported permissions, see [docs](https://learn.microsoft.com/en-us/sql/t-sql/statements/grant-schema-permissions-transact-sql?view=azuresqldb-current#remarks)
     */
    permission: pulumi.Input<string>;
    /**
     * `<database_id>/<principal_id>`. Can be retrieved using `mssql.DatabaseRole`, `mssql.SqlUser`, `mssql.AzureadUser` or `mssql.AzureadServicePrincipal`.
     */
    principalId: pulumi.Input<string>;
    /**
     * `<database_id>/<schema_id>`. Can be retrieved using `mssql.Schema`.
     */
    schemaId: pulumi.Input<string>;
    /**
     * When set to `true`, `principalId` will be allowed to grant the `permission` to other principals. Defaults to `false`.
     */
    withGrantOption?: pulumi.Input<boolean>;
}
