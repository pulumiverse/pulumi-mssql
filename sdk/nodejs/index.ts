// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AzureadServicePrincipalArgs, AzureadServicePrincipalState } from "./azureadServicePrincipal";
export type AzureadServicePrincipal = import("./azureadServicePrincipal").AzureadServicePrincipal;
export const AzureadServicePrincipal: typeof import("./azureadServicePrincipal").AzureadServicePrincipal = null as any;
utilities.lazyLoad(exports, ["AzureadServicePrincipal"], () => require("./azureadServicePrincipal"));

export { AzureadUserArgs, AzureadUserState } from "./azureadUser";
export type AzureadUser = import("./azureadUser").AzureadUser;
export const AzureadUser: typeof import("./azureadUser").AzureadUser = null as any;
utilities.lazyLoad(exports, ["AzureadUser"], () => require("./azureadUser"));

export { DatabaseArgs, DatabaseState } from "./database";
export type Database = import("./database").Database;
export const Database: typeof import("./database").Database = null as any;
utilities.lazyLoad(exports, ["Database"], () => require("./database"));

export { DatabasePermissionArgs, DatabasePermissionState } from "./databasePermission";
export type DatabasePermission = import("./databasePermission").DatabasePermission;
export const DatabasePermission: typeof import("./databasePermission").DatabasePermission = null as any;
utilities.lazyLoad(exports, ["DatabasePermission"], () => require("./databasePermission"));

export { DatabaseRoleArgs, DatabaseRoleState } from "./databaseRole";
export type DatabaseRole = import("./databaseRole").DatabaseRole;
export const DatabaseRole: typeof import("./databaseRole").DatabaseRole = null as any;
utilities.lazyLoad(exports, ["DatabaseRole"], () => require("./databaseRole"));

export { DatabaseRoleMemberArgs, DatabaseRoleMemberState } from "./databaseRoleMember";
export type DatabaseRoleMember = import("./databaseRoleMember").DatabaseRoleMember;
export const DatabaseRoleMember: typeof import("./databaseRoleMember").DatabaseRoleMember = null as any;
utilities.lazyLoad(exports, ["DatabaseRoleMember"], () => require("./databaseRoleMember"));

export { GetAzureadServicePrincipalArgs, GetAzureadServicePrincipalResult, GetAzureadServicePrincipalOutputArgs } from "./getAzureadServicePrincipal";
export const getAzureadServicePrincipal: typeof import("./getAzureadServicePrincipal").getAzureadServicePrincipal = null as any;
export const getAzureadServicePrincipalOutput: typeof import("./getAzureadServicePrincipal").getAzureadServicePrincipalOutput = null as any;
utilities.lazyLoad(exports, ["getAzureadServicePrincipal","getAzureadServicePrincipalOutput"], () => require("./getAzureadServicePrincipal"));

export { GetAzureadUserArgs, GetAzureadUserResult, GetAzureadUserOutputArgs } from "./getAzureadUser";
export const getAzureadUser: typeof import("./getAzureadUser").getAzureadUser = null as any;
export const getAzureadUserOutput: typeof import("./getAzureadUser").getAzureadUserOutput = null as any;
utilities.lazyLoad(exports, ["getAzureadUser","getAzureadUserOutput"], () => require("./getAzureadUser"));

export { GetDatabaseArgs, GetDatabaseResult, GetDatabaseOutputArgs } from "./getDatabase";
export const getDatabase: typeof import("./getDatabase").getDatabase = null as any;
export const getDatabaseOutput: typeof import("./getDatabase").getDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getDatabase","getDatabaseOutput"], () => require("./getDatabase"));

export { GetDatabasePermissionsArgs, GetDatabasePermissionsResult, GetDatabasePermissionsOutputArgs } from "./getDatabasePermissions";
export const getDatabasePermissions: typeof import("./getDatabasePermissions").getDatabasePermissions = null as any;
export const getDatabasePermissionsOutput: typeof import("./getDatabasePermissions").getDatabasePermissionsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabasePermissions","getDatabasePermissionsOutput"], () => require("./getDatabasePermissions"));

export { GetDatabaseRoleArgs, GetDatabaseRoleResult, GetDatabaseRoleOutputArgs } from "./getDatabaseRole";
export const getDatabaseRole: typeof import("./getDatabaseRole").getDatabaseRole = null as any;
export const getDatabaseRoleOutput: typeof import("./getDatabaseRole").getDatabaseRoleOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseRole","getDatabaseRoleOutput"], () => require("./getDatabaseRole"));

export { GetDatabaseRolesArgs, GetDatabaseRolesResult, GetDatabaseRolesOutputArgs } from "./getDatabaseRoles";
export const getDatabaseRoles: typeof import("./getDatabaseRoles").getDatabaseRoles = null as any;
export const getDatabaseRolesOutput: typeof import("./getDatabaseRoles").getDatabaseRolesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseRoles","getDatabaseRolesOutput"], () => require("./getDatabaseRoles"));

export { GetDatabasesResult } from "./getDatabases";
export const getDatabases: typeof import("./getDatabases").getDatabases = null as any;
export const getDatabasesOutput: typeof import("./getDatabases").getDatabasesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabases","getDatabasesOutput"], () => require("./getDatabases"));

export { GetQueryArgs, GetQueryResult, GetQueryOutputArgs } from "./getQuery";
export const getQuery: typeof import("./getQuery").getQuery = null as any;
export const getQueryOutput: typeof import("./getQuery").getQueryOutput = null as any;
utilities.lazyLoad(exports, ["getQuery","getQueryOutput"], () => require("./getQuery"));

export { GetSchemaArgs, GetSchemaResult, GetSchemaOutputArgs } from "./getSchema";
export const getSchema: typeof import("./getSchema").getSchema = null as any;
export const getSchemaOutput: typeof import("./getSchema").getSchemaOutput = null as any;
utilities.lazyLoad(exports, ["getSchema","getSchemaOutput"], () => require("./getSchema"));

export { GetSchemaPermissionsArgs, GetSchemaPermissionsResult, GetSchemaPermissionsOutputArgs } from "./getSchemaPermissions";
export const getSchemaPermissions: typeof import("./getSchemaPermissions").getSchemaPermissions = null as any;
export const getSchemaPermissionsOutput: typeof import("./getSchemaPermissions").getSchemaPermissionsOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaPermissions","getSchemaPermissionsOutput"], () => require("./getSchemaPermissions"));

export { GetSchemasArgs, GetSchemasResult, GetSchemasOutputArgs } from "./getSchemas";
export const getSchemas: typeof import("./getSchemas").getSchemas = null as any;
export const getSchemasOutput: typeof import("./getSchemas").getSchemasOutput = null as any;
utilities.lazyLoad(exports, ["getSchemas","getSchemasOutput"], () => require("./getSchemas"));

export { GetServerPermissionsArgs, GetServerPermissionsResult, GetServerPermissionsOutputArgs } from "./getServerPermissions";
export const getServerPermissions: typeof import("./getServerPermissions").getServerPermissions = null as any;
export const getServerPermissionsOutput: typeof import("./getServerPermissions").getServerPermissionsOutput = null as any;
utilities.lazyLoad(exports, ["getServerPermissions","getServerPermissionsOutput"], () => require("./getServerPermissions"));

export { GetServerRoleArgs, GetServerRoleResult, GetServerRoleOutputArgs } from "./getServerRole";
export const getServerRole: typeof import("./getServerRole").getServerRole = null as any;
export const getServerRoleOutput: typeof import("./getServerRole").getServerRoleOutput = null as any;
utilities.lazyLoad(exports, ["getServerRole","getServerRoleOutput"], () => require("./getServerRole"));

export { GetServerRolesResult } from "./getServerRoles";
export const getServerRoles: typeof import("./getServerRoles").getServerRoles = null as any;
export const getServerRolesOutput: typeof import("./getServerRoles").getServerRolesOutput = null as any;
utilities.lazyLoad(exports, ["getServerRoles","getServerRolesOutput"], () => require("./getServerRoles"));

export { GetSqlLoginArgs, GetSqlLoginResult, GetSqlLoginOutputArgs } from "./getSqlLogin";
export const getSqlLogin: typeof import("./getSqlLogin").getSqlLogin = null as any;
export const getSqlLoginOutput: typeof import("./getSqlLogin").getSqlLoginOutput = null as any;
utilities.lazyLoad(exports, ["getSqlLogin","getSqlLoginOutput"], () => require("./getSqlLogin"));

export { GetSqlLoginsResult } from "./getSqlLogins";
export const getSqlLogins: typeof import("./getSqlLogins").getSqlLogins = null as any;
export const getSqlLoginsOutput: typeof import("./getSqlLogins").getSqlLoginsOutput = null as any;
utilities.lazyLoad(exports, ["getSqlLogins","getSqlLoginsOutput"], () => require("./getSqlLogins"));

export { GetSqlUserArgs, GetSqlUserResult, GetSqlUserOutputArgs } from "./getSqlUser";
export const getSqlUser: typeof import("./getSqlUser").getSqlUser = null as any;
export const getSqlUserOutput: typeof import("./getSqlUser").getSqlUserOutput = null as any;
utilities.lazyLoad(exports, ["getSqlUser","getSqlUserOutput"], () => require("./getSqlUser"));

export { GetSqlUsersArgs, GetSqlUsersResult, GetSqlUsersOutputArgs } from "./getSqlUsers";
export const getSqlUsers: typeof import("./getSqlUsers").getSqlUsers = null as any;
export const getSqlUsersOutput: typeof import("./getSqlUsers").getSqlUsersOutput = null as any;
utilities.lazyLoad(exports, ["getSqlUsers","getSqlUsersOutput"], () => require("./getSqlUsers"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SchemaArgs, SchemaState } from "./schema";
export type Schema = import("./schema").Schema;
export const Schema: typeof import("./schema").Schema = null as any;
utilities.lazyLoad(exports, ["Schema"], () => require("./schema"));

export { SchemaPermissionArgs, SchemaPermissionState } from "./schemaPermission";
export type SchemaPermission = import("./schemaPermission").SchemaPermission;
export const SchemaPermission: typeof import("./schemaPermission").SchemaPermission = null as any;
utilities.lazyLoad(exports, ["SchemaPermission"], () => require("./schemaPermission"));

export { ScriptArgs, ScriptState } from "./script";
export type Script = import("./script").Script;
export const Script: typeof import("./script").Script = null as any;
utilities.lazyLoad(exports, ["Script"], () => require("./script"));

export { ServerPermissionArgs, ServerPermissionState } from "./serverPermission";
export type ServerPermission = import("./serverPermission").ServerPermission;
export const ServerPermission: typeof import("./serverPermission").ServerPermission = null as any;
utilities.lazyLoad(exports, ["ServerPermission"], () => require("./serverPermission"));

export { ServerRoleArgs, ServerRoleState } from "./serverRole";
export type ServerRole = import("./serverRole").ServerRole;
export const ServerRole: typeof import("./serverRole").ServerRole = null as any;
utilities.lazyLoad(exports, ["ServerRole"], () => require("./serverRole"));

export { ServerRoleMemberArgs, ServerRoleMemberState } from "./serverRoleMember";
export type ServerRoleMember = import("./serverRoleMember").ServerRoleMember;
export const ServerRoleMember: typeof import("./serverRoleMember").ServerRoleMember = null as any;
utilities.lazyLoad(exports, ["ServerRoleMember"], () => require("./serverRoleMember"));

export { SqlLoginArgs, SqlLoginState } from "./sqlLogin";
export type SqlLogin = import("./sqlLogin").SqlLogin;
export const SqlLogin: typeof import("./sqlLogin").SqlLogin = null as any;
utilities.lazyLoad(exports, ["SqlLogin"], () => require("./sqlLogin"));

export { SqlUserArgs, SqlUserState } from "./sqlUser";
export type SqlUser = import("./sqlUser").SqlUser;
export const SqlUser: typeof import("./sqlUser").SqlUser = null as any;
utilities.lazyLoad(exports, ["SqlUser"], () => require("./sqlUser"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "mssql:index/azureadServicePrincipal:AzureadServicePrincipal":
                return new AzureadServicePrincipal(name, <any>undefined, { urn })
            case "mssql:index/azureadUser:AzureadUser":
                return new AzureadUser(name, <any>undefined, { urn })
            case "mssql:index/database:Database":
                return new Database(name, <any>undefined, { urn })
            case "mssql:index/databasePermission:DatabasePermission":
                return new DatabasePermission(name, <any>undefined, { urn })
            case "mssql:index/databaseRole:DatabaseRole":
                return new DatabaseRole(name, <any>undefined, { urn })
            case "mssql:index/databaseRoleMember:DatabaseRoleMember":
                return new DatabaseRoleMember(name, <any>undefined, { urn })
            case "mssql:index/schema:Schema":
                return new Schema(name, <any>undefined, { urn })
            case "mssql:index/schemaPermission:SchemaPermission":
                return new SchemaPermission(name, <any>undefined, { urn })
            case "mssql:index/script:Script":
                return new Script(name, <any>undefined, { urn })
            case "mssql:index/serverPermission:ServerPermission":
                return new ServerPermission(name, <any>undefined, { urn })
            case "mssql:index/serverRole:ServerRole":
                return new ServerRole(name, <any>undefined, { urn })
            case "mssql:index/serverRoleMember:ServerRoleMember":
                return new ServerRoleMember(name, <any>undefined, { urn })
            case "mssql:index/sqlLogin:SqlLogin":
                return new SqlLogin(name, <any>undefined, { urn })
            case "mssql:index/sqlUser:SqlUser":
                return new SqlUser(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("mssql", "index/azureadServicePrincipal", _module)
pulumi.runtime.registerResourceModule("mssql", "index/azureadUser", _module)
pulumi.runtime.registerResourceModule("mssql", "index/database", _module)
pulumi.runtime.registerResourceModule("mssql", "index/databasePermission", _module)
pulumi.runtime.registerResourceModule("mssql", "index/databaseRole", _module)
pulumi.runtime.registerResourceModule("mssql", "index/databaseRoleMember", _module)
pulumi.runtime.registerResourceModule("mssql", "index/schema", _module)
pulumi.runtime.registerResourceModule("mssql", "index/schemaPermission", _module)
pulumi.runtime.registerResourceModule("mssql", "index/script", _module)
pulumi.runtime.registerResourceModule("mssql", "index/serverPermission", _module)
pulumi.runtime.registerResourceModule("mssql", "index/serverRole", _module)
pulumi.runtime.registerResourceModule("mssql", "index/serverRoleMember", _module)
pulumi.runtime.registerResourceModule("mssql", "index/sqlLogin", _module)
pulumi.runtime.registerResourceModule("mssql", "index/sqlUser", _module)
pulumi.runtime.registerResourcePackage("mssql", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:mssql") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
