// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Obtains information about all schemas found in SQL database.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mssql from "@pulumi/mssql";
 *
 * const example = mssql.getDatabase({
 *     name: "example",
 * });
 * const all = example.then(example => mssql.getSchemas({
 *     databaseId: example.id,
 * }));
 * export const allSchemaNames = all.then(all => all.schemas.map(__item => __item.name));
 * ```
 */
export function getSchemas(args?: GetSchemasArgs, opts?: pulumi.InvokeOptions): Promise<GetSchemasResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mssql:index/getSchemas:getSchemas", {
        "databaseId": args.databaseId,
    }, opts);
}

/**
 * A collection of arguments for invoking getSchemas.
 */
export interface GetSchemasArgs {
    /**
     * ID of database. Can be retrieved using `mssql.Database` or `SELECT DB_ID('<db_name>')`. Defaults to ID of `master`.
     */
    databaseId?: string;
}

/**
 * A collection of values returned by getSchemas.
 */
export interface GetSchemasResult {
    /**
     * ID of database. Can be retrieved using `mssql.Database` or `SELECT DB_ID('<db_name>')`. Defaults to ID of `master`.
     */
    readonly databaseId: string;
    /**
     * ID of the data source, equals to database ID
     */
    readonly id: string;
    /**
     * Set of schemas found in the DB.
     */
    readonly schemas: outputs.GetSchemasSchema[];
}
/**
 * Obtains information about all schemas found in SQL database.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mssql from "@pulumi/mssql";
 *
 * const example = mssql.getDatabase({
 *     name: "example",
 * });
 * const all = example.then(example => mssql.getSchemas({
 *     databaseId: example.id,
 * }));
 * export const allSchemaNames = all.then(all => all.schemas.map(__item => __item.name));
 * ```
 */
export function getSchemasOutput(args?: GetSchemasOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSchemasResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("mssql:index/getSchemas:getSchemas", {
        "databaseId": args.databaseId,
    }, opts);
}

/**
 * A collection of arguments for invoking getSchemas.
 */
export interface GetSchemasOutputArgs {
    /**
     * ID of database. Can be retrieved using `mssql.Database` or `SELECT DB_ID('<db_name>')`. Defaults to ID of `master`.
     */
    databaseId?: pulumi.Input<string>;
}
