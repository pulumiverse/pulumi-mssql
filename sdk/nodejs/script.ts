// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Allows execution of arbitrary SQL scripts to check state and apply desired state.
 *
 * > **Note** This resource is meant to be an escape hatch for all cases not supported by the provider's resources. Whenever possible, use dedicated resources, which offer better plan, validation and error reporting.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mssql from "@pulumi/mssql";
 * import * as mssql from "@pulumiverse/mssql";
 *
 * const test = mssql.getDatabase({
 *     name: "test",
 * });
 * const cdc = new mssql.Script("cdc", {
 *     databaseId: test.then(test => test.id),
 *     readScript: test.then(test => `SELECT COUNT(*) AS [is_enabled] FROM sys.change_tracking_databases WHERE database_id=${test.id}`),
 *     deleteScript: test.then(test => `ALTER DATABASE [${test.name}] SET CHANGE_TRACKING = OFF`),
 *     updateScript: Promise.all([test, test]).then(([test, test1]) => `IF (SELECT COUNT(*) FROM sys.change_tracking_databases WHERE database_id=${test.id}) = 0
 *   ALTER DATABASE [${test1.name}] SET CHANGE_TRACKING = ON
 * `),
 *     state: {
 *         is_enabled: "1",
 *     },
 * });
 * ```
 */
export class Script extends pulumi.CustomResource {
    /**
     * Get an existing Script resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ScriptState, opts?: pulumi.CustomResourceOptions): Script {
        return new Script(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mssql:index/script:Script';

    /**
     * Returns true if the given object is an instance of Script.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Script {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Script.__pulumiType;
    }

    public readonly createScript!: pulumi.Output<string | undefined>;
    /**
     * ID of database. Can be retrieved using `mssql.Database` or `SELECT DB_ID('<db_name>')`.
     */
    public readonly databaseId!: pulumi.Output<string>;
    /**
     * SQL script executed when the resource is being destroyed. When not provided, no action will be taken during resource destruction.
     */
    public readonly deleteScript!: pulumi.Output<string | undefined>;
    /**
     * SQL script returning current state of the DB. It must return single-row result set where column names match the keys of `state` map and all values are strings that will be compared against `state` to determine if the resource state matches DB state.
     */
    public readonly readScript!: pulumi.Output<string>;
    /**
     * Desired state of the DB. It is arbitrary map of string values that will be compared against the values returned by the `readScript`.
     */
    public readonly state!: pulumi.Output<{[key: string]: string}>;
    /**
     * SQL script executed when the desired state specified in `state` attribute does not match the state returned by `readScript`
     */
    public readonly updateScript!: pulumi.Output<string>;

    /**
     * Create a Script resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScriptArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ScriptArgs | ScriptState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ScriptState | undefined;
            resourceInputs["createScript"] = state ? state.createScript : undefined;
            resourceInputs["databaseId"] = state ? state.databaseId : undefined;
            resourceInputs["deleteScript"] = state ? state.deleteScript : undefined;
            resourceInputs["readScript"] = state ? state.readScript : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["updateScript"] = state ? state.updateScript : undefined;
        } else {
            const args = argsOrState as ScriptArgs | undefined;
            if ((!args || args.databaseId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseId'");
            }
            if ((!args || args.readScript === undefined) && !opts.urn) {
                throw new Error("Missing required property 'readScript'");
            }
            if ((!args || args.state === undefined) && !opts.urn) {
                throw new Error("Missing required property 'state'");
            }
            if ((!args || args.updateScript === undefined) && !opts.urn) {
                throw new Error("Missing required property 'updateScript'");
            }
            resourceInputs["createScript"] = args ? args.createScript : undefined;
            resourceInputs["databaseId"] = args ? args.databaseId : undefined;
            resourceInputs["deleteScript"] = args ? args.deleteScript : undefined;
            resourceInputs["readScript"] = args ? args.readScript : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["updateScript"] = args ? args.updateScript : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Script.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Script resources.
 */
export interface ScriptState {
    createScript?: pulumi.Input<string>;
    /**
     * ID of database. Can be retrieved using `mssql.Database` or `SELECT DB_ID('<db_name>')`.
     */
    databaseId?: pulumi.Input<string>;
    /**
     * SQL script executed when the resource is being destroyed. When not provided, no action will be taken during resource destruction.
     */
    deleteScript?: pulumi.Input<string>;
    /**
     * SQL script returning current state of the DB. It must return single-row result set where column names match the keys of `state` map and all values are strings that will be compared against `state` to determine if the resource state matches DB state.
     */
    readScript?: pulumi.Input<string>;
    /**
     * Desired state of the DB. It is arbitrary map of string values that will be compared against the values returned by the `readScript`.
     */
    state?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * SQL script executed when the desired state specified in `state` attribute does not match the state returned by `readScript`
     */
    updateScript?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Script resource.
 */
export interface ScriptArgs {
    createScript?: pulumi.Input<string>;
    /**
     * ID of database. Can be retrieved using `mssql.Database` or `SELECT DB_ID('<db_name>')`.
     */
    databaseId: pulumi.Input<string>;
    /**
     * SQL script executed when the resource is being destroyed. When not provided, no action will be taken during resource destruction.
     */
    deleteScript?: pulumi.Input<string>;
    /**
     * SQL script returning current state of the DB. It must return single-row result set where column names match the keys of `state` map and all values are strings that will be compared against `state` to determine if the resource state matches DB state.
     */
    readScript: pulumi.Input<string>;
    /**
     * Desired state of the DB. It is arbitrary map of string values that will be compared against the values returned by the `readScript`.
     */
    state: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * SQL script executed when the desired state specified in `state` attribute does not match the state returned by `readScript`
     */
    updateScript: pulumi.Input<string>;
}
