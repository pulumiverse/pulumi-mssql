// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Obtains information about all SQL users found in a database
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mssql from "@pulumi/mssql";
 *
 * const master = mssql.getDatabase({
 *     name: "master",
 * });
 * const example = master.then(master => mssql.getSqlUsers({
 *     databaseId: master.id,
 * }));
 * export const users = example.then(example => example.users);
 * ```
 */
export function getSqlUsers(args?: GetSqlUsersArgs, opts?: pulumi.InvokeOptions): Promise<GetSqlUsersResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mssql:index/getSqlUsers:getSqlUsers", {
        "databaseId": args.databaseId,
    }, opts);
}

/**
 * A collection of arguments for invoking getSqlUsers.
 */
export interface GetSqlUsersArgs {
    /**
     * ID of database. Can be retrieved using `mssql.Database` or `SELECT DB_ID('<db_name>')`. Defaults to ID of `master`.
     */
    databaseId?: string;
}

/**
 * A collection of values returned by getSqlUsers.
 */
export interface GetSqlUsersResult {
    /**
     * ID of database. Can be retrieved using `mssql.Database` or `SELECT DB_ID('<db_name>')`. Defaults to ID of `master`.
     */
    readonly databaseId?: string;
    /**
     * ID of the resource, equals to database ID
     */
    readonly id: string;
    /**
     * Set of SQL user objects
     */
    readonly users: outputs.GetSqlUsersUser[];
}
/**
 * Obtains information about all SQL users found in a database
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mssql from "@pulumi/mssql";
 *
 * const master = mssql.getDatabase({
 *     name: "master",
 * });
 * const example = master.then(master => mssql.getSqlUsers({
 *     databaseId: master.id,
 * }));
 * export const users = example.then(example => example.users);
 * ```
 */
export function getSqlUsersOutput(args?: GetSqlUsersOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSqlUsersResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("mssql:index/getSqlUsers:getSqlUsers", {
        "databaseId": args.databaseId,
    }, opts);
}

/**
 * A collection of arguments for invoking getSqlUsers.
 */
export interface GetSqlUsersOutputArgs {
    /**
     * ID of database. Can be retrieved using `mssql.Database` or `SELECT DB_ID('<db_name>')`. Defaults to ID of `master`.
     */
    databaseId?: pulumi.Input<string>;
}
