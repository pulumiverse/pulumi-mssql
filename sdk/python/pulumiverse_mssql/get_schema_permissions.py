# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetSchemaPermissionsResult',
    'AwaitableGetSchemaPermissionsResult',
    'get_schema_permissions',
    'get_schema_permissions_output',
]

@pulumi.output_type
class GetSchemaPermissionsResult:
    """
    A collection of values returned by getSchemaPermissions.
    """
    def __init__(__self__, id=None, permissions=None, principal_id=None, schema_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if permissions and not isinstance(permissions, list):
            raise TypeError("Expected argument 'permissions' to be a list")
        pulumi.set(__self__, "permissions", permissions)
        if principal_id and not isinstance(principal_id, str):
            raise TypeError("Expected argument 'principal_id' to be a str")
        pulumi.set(__self__, "principal_id", principal_id)
        if schema_id and not isinstance(schema_id, str):
            raise TypeError("Expected argument 'schema_id' to be a str")
        pulumi.set(__self__, "schema_id", schema_id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        `<database_id>/<schema_id>/<principal_id>`.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def permissions(self) -> Sequence['outputs.GetSchemaPermissionsPermissionResult']:
        """
        Set of permissions granted to the principal
        """
        return pulumi.get(self, "permissions")

    @property
    @pulumi.getter(name="principalId")
    def principal_id(self) -> str:
        """
        `<database_id>/<principal_id>`. Can be retrieved using `DatabaseRole`, `SqlUser`, `AzureadUser` or `AzureadServicePrincipal`.
        """
        return pulumi.get(self, "principal_id")

    @property
    @pulumi.getter(name="schemaId")
    def schema_id(self) -> str:
        """
        `<database_id>/<schema_id>`. Can be retrieved using `Schema`.
        """
        return pulumi.get(self, "schema_id")


class AwaitableGetSchemaPermissionsResult(GetSchemaPermissionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSchemaPermissionsResult(
            id=self.id,
            permissions=self.permissions,
            principal_id=self.principal_id,
            schema_id=self.schema_id)


def get_schema_permissions(principal_id: Optional[str] = None,
                           schema_id: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSchemaPermissionsResult:
    """
    Returns all permissions granted in a schema to given principal

    ## Example Usage

    ```python
    import pulumi
    import pulumi_mssql as mssql

    example_database = mssql.get_database(name="example")
    example_sql_user = mssql.get_sql_user(name="example_user",
        database_id=example_database.id)
    example_schema = mssql.get_schema(name="example_schema",
        database_id=example_database.id)
    example_schema_permissions = mssql.get_schema_permissions(schema_id=example_schema.id,
        principal_id=example_sql_user.id)
    pulumi.export("permissions", example_schema_permissions.permissions)
    ```


    :param str principal_id: `<database_id>/<principal_id>`. Can be retrieved using `DatabaseRole`, `SqlUser`, `AzureadUser` or `AzureadServicePrincipal`.
    :param str schema_id: `<database_id>/<schema_id>`. Can be retrieved using `Schema`.
    """
    __args__ = dict()
    __args__['principalId'] = principal_id
    __args__['schemaId'] = schema_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('mssql:index/getSchemaPermissions:getSchemaPermissions', __args__, opts=opts, typ=GetSchemaPermissionsResult).value

    return AwaitableGetSchemaPermissionsResult(
        id=pulumi.get(__ret__, 'id'),
        permissions=pulumi.get(__ret__, 'permissions'),
        principal_id=pulumi.get(__ret__, 'principal_id'),
        schema_id=pulumi.get(__ret__, 'schema_id'))


@_utilities.lift_output_func(get_schema_permissions)
def get_schema_permissions_output(principal_id: Optional[pulumi.Input[str]] = None,
                                  schema_id: Optional[pulumi.Input[str]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSchemaPermissionsResult]:
    """
    Returns all permissions granted in a schema to given principal

    ## Example Usage

    ```python
    import pulumi
    import pulumi_mssql as mssql

    example_database = mssql.get_database(name="example")
    example_sql_user = mssql.get_sql_user(name="example_user",
        database_id=example_database.id)
    example_schema = mssql.get_schema(name="example_schema",
        database_id=example_database.id)
    example_schema_permissions = mssql.get_schema_permissions(schema_id=example_schema.id,
        principal_id=example_sql_user.id)
    pulumi.export("permissions", example_schema_permissions.permissions)
    ```


    :param str principal_id: `<database_id>/<principal_id>`. Can be retrieved using `DatabaseRole`, `SqlUser`, `AzureadUser` or `AzureadServicePrincipal`.
    :param str schema_id: `<database_id>/<schema_id>`. Can be retrieved using `Schema`.
    """
    ...
