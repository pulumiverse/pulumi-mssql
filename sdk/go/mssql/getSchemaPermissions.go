// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mssql

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-mssql/sdk/go/mssql/internal"
)

// Returns all permissions granted in a schema to given principal
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-mssql/sdk/go/mssql"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleDatabase, err := mssql.LookupDatabase(ctx, &mssql.LookupDatabaseArgs{
//				Name: "example",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleSqlUser, err := mssql.LookupSqlUser(ctx, &mssql.LookupSqlUserArgs{
//				Name:       "example_user",
//				DatabaseId: pulumi.StringRef(exampleDatabase.Id),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleSchema, err := mssql.LookupSchema(ctx, &mssql.LookupSchemaArgs{
//				Name:       pulumi.StringRef("example_schema"),
//				DatabaseId: pulumi.StringRef(exampleDatabase.Id),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleSchemaPermissions, err := mssql.GetSchemaPermissions(ctx, &mssql.GetSchemaPermissionsArgs{
//				SchemaId:    exampleSchema.Id,
//				PrincipalId: exampleSqlUser.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("permissions", exampleSchemaPermissions.Permissions)
//			return nil
//		})
//	}
//
// ```
func GetSchemaPermissions(ctx *pulumi.Context, args *GetSchemaPermissionsArgs, opts ...pulumi.InvokeOption) (*GetSchemaPermissionsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSchemaPermissionsResult
	err := ctx.Invoke("mssql:index/getSchemaPermissions:getSchemaPermissions", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSchemaPermissions.
type GetSchemaPermissionsArgs struct {
	// `<database_id>/<principal_id>`. Can be retrieved using `DatabaseRole`, `SqlUser`, `AzureadUser` or `AzureadServicePrincipal`.
	PrincipalId string `pulumi:"principalId"`
	// `<database_id>/<schema_id>`. Can be retrieved using `Schema`.
	SchemaId string `pulumi:"schemaId"`
}

// A collection of values returned by getSchemaPermissions.
type GetSchemaPermissionsResult struct {
	// `<database_id>/<schema_id>/<principal_id>`.
	Id string `pulumi:"id"`
	// Set of permissions granted to the principal
	Permissions []GetSchemaPermissionsPermission `pulumi:"permissions"`
	// `<database_id>/<principal_id>`. Can be retrieved using `DatabaseRole`, `SqlUser`, `AzureadUser` or `AzureadServicePrincipal`.
	PrincipalId string `pulumi:"principalId"`
	// `<database_id>/<schema_id>`. Can be retrieved using `Schema`.
	SchemaId string `pulumi:"schemaId"`
}

func GetSchemaPermissionsOutput(ctx *pulumi.Context, args GetSchemaPermissionsOutputArgs, opts ...pulumi.InvokeOption) GetSchemaPermissionsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetSchemaPermissionsResultOutput, error) {
			args := v.(GetSchemaPermissionsArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetSchemaPermissionsResult
			secret, err := ctx.InvokePackageRaw("mssql:index/getSchemaPermissions:getSchemaPermissions", args, &rv, "", opts...)
			if err != nil {
				return GetSchemaPermissionsResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetSchemaPermissionsResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetSchemaPermissionsResultOutput), nil
			}
			return output, nil
		}).(GetSchemaPermissionsResultOutput)
}

// A collection of arguments for invoking getSchemaPermissions.
type GetSchemaPermissionsOutputArgs struct {
	// `<database_id>/<principal_id>`. Can be retrieved using `DatabaseRole`, `SqlUser`, `AzureadUser` or `AzureadServicePrincipal`.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	// `<database_id>/<schema_id>`. Can be retrieved using `Schema`.
	SchemaId pulumi.StringInput `pulumi:"schemaId"`
}

func (GetSchemaPermissionsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemaPermissionsArgs)(nil)).Elem()
}

// A collection of values returned by getSchemaPermissions.
type GetSchemaPermissionsResultOutput struct{ *pulumi.OutputState }

func (GetSchemaPermissionsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemaPermissionsResult)(nil)).Elem()
}

func (o GetSchemaPermissionsResultOutput) ToGetSchemaPermissionsResultOutput() GetSchemaPermissionsResultOutput {
	return o
}

func (o GetSchemaPermissionsResultOutput) ToGetSchemaPermissionsResultOutputWithContext(ctx context.Context) GetSchemaPermissionsResultOutput {
	return o
}

// `<database_id>/<schema_id>/<principal_id>`.
func (o GetSchemaPermissionsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemaPermissionsResult) string { return v.Id }).(pulumi.StringOutput)
}

// Set of permissions granted to the principal
func (o GetSchemaPermissionsResultOutput) Permissions() GetSchemaPermissionsPermissionArrayOutput {
	return o.ApplyT(func(v GetSchemaPermissionsResult) []GetSchemaPermissionsPermission { return v.Permissions }).(GetSchemaPermissionsPermissionArrayOutput)
}

// `<database_id>/<principal_id>`. Can be retrieved using `DatabaseRole`, `SqlUser`, `AzureadUser` or `AzureadServicePrincipal`.
func (o GetSchemaPermissionsResultOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemaPermissionsResult) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// `<database_id>/<schema_id>`. Can be retrieved using `Schema`.
func (o GetSchemaPermissionsResultOutput) SchemaId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemaPermissionsResult) string { return v.SchemaId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSchemaPermissionsResultOutput{})
}
