// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mssql

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves arbitrary SQL query result.
//
// > **Note** This data source is meant to be an escape hatch for all cases not supported by the provider's data sources. Whenever possible, use dedicated data sources, which offer better plan, validation and error reporting.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-mssql/sdk/go/mssql"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			test, err := mssql.LookupDatabase(ctx, &mssql.LookupDatabaseArgs{
//				Name: "test",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			column, err := mssql.GetQuery(ctx, &mssql.GetQueryArgs{
//				DatabaseId: test.Id,
//				Query:      "SELECT [column_id], [name] FROM sys.columns WHERE [object_id] = OBJECT_ID('test_table')",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			var splat0 []string
//			for _, val0 := range column.Results {
//				splat0 = append(splat0, val0.Name)
//			}
//			ctx.Export("columnNames", splat0)
//			return nil
//		})
//	}
//
// ```
func GetQuery(ctx *pulumi.Context, args *GetQueryArgs, opts ...pulumi.InvokeOption) (*GetQueryResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetQueryResult
	err := ctx.Invoke("mssql:index/getQuery:getQuery", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getQuery.
type GetQueryArgs struct {
	// ID of database. Can be retrieved using `Database` or `SELECT DB_ID('<db_name>')`.
	DatabaseId string `pulumi:"databaseId"`
	// SQL query returning single result set, with any number of rows, where all columns are strings
	Query string `pulumi:"query"`
}

// A collection of values returned by getQuery.
type GetQueryResult struct {
	// ID of database. Can be retrieved using `Database` or `SELECT DB_ID('<db_name>')`.
	DatabaseId string `pulumi:"databaseId"`
	Id         string `pulumi:"id"`
	// SQL query returning single result set, with any number of rows, where all columns are strings
	Query string `pulumi:"query"`
	// Results of the SQL query, represented as list of maps, where the map key corresponds to column name and the value is the value of column in given row.
	Results []map[string]string `pulumi:"results"`
}

func GetQueryOutput(ctx *pulumi.Context, args GetQueryOutputArgs, opts ...pulumi.InvokeOption) GetQueryResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetQueryResult, error) {
			args := v.(GetQueryArgs)
			r, err := GetQuery(ctx, &args, opts...)
			var s GetQueryResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetQueryResultOutput)
}

// A collection of arguments for invoking getQuery.
type GetQueryOutputArgs struct {
	// ID of database. Can be retrieved using `Database` or `SELECT DB_ID('<db_name>')`.
	DatabaseId pulumi.StringInput `pulumi:"databaseId"`
	// SQL query returning single result set, with any number of rows, where all columns are strings
	Query pulumi.StringInput `pulumi:"query"`
}

func (GetQueryOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQueryArgs)(nil)).Elem()
}

// A collection of values returned by getQuery.
type GetQueryResultOutput struct{ *pulumi.OutputState }

func (GetQueryResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQueryResult)(nil)).Elem()
}

func (o GetQueryResultOutput) ToGetQueryResultOutput() GetQueryResultOutput {
	return o
}

func (o GetQueryResultOutput) ToGetQueryResultOutputWithContext(ctx context.Context) GetQueryResultOutput {
	return o
}

// ID of database. Can be retrieved using `Database` or `SELECT DB_ID('<db_name>')`.
func (o GetQueryResultOutput) DatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v GetQueryResult) string { return v.DatabaseId }).(pulumi.StringOutput)
}

func (o GetQueryResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetQueryResult) string { return v.Id }).(pulumi.StringOutput)
}

// SQL query returning single result set, with any number of rows, where all columns are strings
func (o GetQueryResultOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v GetQueryResult) string { return v.Query }).(pulumi.StringOutput)
}

// Results of the SQL query, represented as list of maps, where the map key corresponds to column name and the value is the value of column in given row.
func (o GetQueryResultOutput) Results() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v GetQueryResult) []map[string]string { return v.Results }).(pulumi.StringMapArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetQueryResultOutput{})
}
