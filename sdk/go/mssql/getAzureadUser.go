// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mssql

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-mssql/sdk/go/mssql/internal"
)

// Obtains information about single Azure AD database user.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-mssql/sdk/go/mssql"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleDatabase, err := mssql.LookupDatabase(ctx, &mssql.LookupDatabaseArgs{
//				Name: "example",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleAzureadUser, err := mssql.LookupAzureadUser(ctx, &mssql.LookupAzureadUserArgs{
//				Name:       pulumi.StringRef("example"),
//				DatabaseId: exampleDatabase.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("userObjectId", exampleAzureadUser.UserObjectId)
//			return nil
//		})
//	}
//
// ```
func LookupAzureadUser(ctx *pulumi.Context, args *LookupAzureadUserArgs, opts ...pulumi.InvokeOption) (*LookupAzureadUserResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAzureadUserResult
	err := ctx.Invoke("mssql:index/getAzureadUser:getAzureadUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAzureadUser.
type LookupAzureadUserArgs struct {
	// ID of database. Can be retrieved using `Database` or `SELECT DB_ID('<db_name>')`.
	DatabaseId string `pulumi:"databaseId"`
	// User name. Cannot be longer than 128 chars.
	Name *string `pulumi:"name"`
	// Azure AD objectId of the user. This can be either regular user or a group.
	UserObjectId *string `pulumi:"userObjectId"`
}

// A collection of values returned by getAzureadUser.
type LookupAzureadUserResult struct {
	// ID of database. Can be retrieved using `Database` or `SELECT DB_ID('<db_name>')`.
	DatabaseId string `pulumi:"databaseId"`
	// `<database_id>/<user_id>`. User ID can be retrieved using `sys.database_principals` view.
	Id string `pulumi:"id"`
	// User name. Cannot be longer than 128 chars.
	Name string `pulumi:"name"`
	// Azure AD objectId of the user. This can be either regular user or a group.
	UserObjectId string `pulumi:"userObjectId"`
}

func LookupAzureadUserOutput(ctx *pulumi.Context, args LookupAzureadUserOutputArgs, opts ...pulumi.InvokeOption) LookupAzureadUserResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAzureadUserResultOutput, error) {
			args := v.(LookupAzureadUserArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupAzureadUserResult
			secret, err := ctx.InvokePackageRaw("mssql:index/getAzureadUser:getAzureadUser", args, &rv, "", opts...)
			if err != nil {
				return LookupAzureadUserResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupAzureadUserResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupAzureadUserResultOutput), nil
			}
			return output, nil
		}).(LookupAzureadUserResultOutput)
}

// A collection of arguments for invoking getAzureadUser.
type LookupAzureadUserOutputArgs struct {
	// ID of database. Can be retrieved using `Database` or `SELECT DB_ID('<db_name>')`.
	DatabaseId pulumi.StringInput `pulumi:"databaseId"`
	// User name. Cannot be longer than 128 chars.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Azure AD objectId of the user. This can be either regular user or a group.
	UserObjectId pulumi.StringPtrInput `pulumi:"userObjectId"`
}

func (LookupAzureadUserOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAzureadUserArgs)(nil)).Elem()
}

// A collection of values returned by getAzureadUser.
type LookupAzureadUserResultOutput struct{ *pulumi.OutputState }

func (LookupAzureadUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAzureadUserResult)(nil)).Elem()
}

func (o LookupAzureadUserResultOutput) ToLookupAzureadUserResultOutput() LookupAzureadUserResultOutput {
	return o
}

func (o LookupAzureadUserResultOutput) ToLookupAzureadUserResultOutputWithContext(ctx context.Context) LookupAzureadUserResultOutput {
	return o
}

// ID of database. Can be retrieved using `Database` or `SELECT DB_ID('<db_name>')`.
func (o LookupAzureadUserResultOutput) DatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAzureadUserResult) string { return v.DatabaseId }).(pulumi.StringOutput)
}

// `<database_id>/<user_id>`. User ID can be retrieved using `sys.database_principals` view.
func (o LookupAzureadUserResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAzureadUserResult) string { return v.Id }).(pulumi.StringOutput)
}

// User name. Cannot be longer than 128 chars.
func (o LookupAzureadUserResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAzureadUserResult) string { return v.Name }).(pulumi.StringOutput)
}

// Azure AD objectId of the user. This can be either regular user or a group.
func (o LookupAzureadUserResultOutput) UserObjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAzureadUserResult) string { return v.UserObjectId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAzureadUserResultOutput{})
}
