// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mssql

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Returns all permissions grated to given principal
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-mssql/sdk/go/mssql"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleSqlLogin, err := mssql.LookupSqlLogin(ctx, &mssql.LookupSqlLoginArgs{
//				Name: "example_login",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleServerPermissions, err := mssql.GetServerPermissions(ctx, &mssql.GetServerPermissionsArgs{
//				PrincipalId: exampleSqlLogin.PrincipalId,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("permissions", exampleServerPermissions.Permissions)
//			return nil
//		})
//	}
//
// ```
func GetServerPermissions(ctx *pulumi.Context, args *GetServerPermissionsArgs, opts ...pulumi.InvokeOption) (*GetServerPermissionsResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetServerPermissionsResult
	err := ctx.Invoke("mssql:index/getServerPermissions:getServerPermissions", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getServerPermissions.
type GetServerPermissionsArgs struct {
	// ID of the principal who will be granted `permission`. Can be retrieved using `ServerRole` or `SqlLogin`.
	PrincipalId string `pulumi:"principalId"`
}

// A collection of values returned by getServerPermissions.
type GetServerPermissionsResult struct {
	// Equals to `principalId`.
	Id string `pulumi:"id"`
	// Set of permissions granted to the principal
	Permissions []GetServerPermissionsPermission `pulumi:"permissions"`
	// ID of the principal who will be granted `permission`. Can be retrieved using `ServerRole` or `SqlLogin`.
	PrincipalId string `pulumi:"principalId"`
}

func GetServerPermissionsOutput(ctx *pulumi.Context, args GetServerPermissionsOutputArgs, opts ...pulumi.InvokeOption) GetServerPermissionsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetServerPermissionsResult, error) {
			args := v.(GetServerPermissionsArgs)
			r, err := GetServerPermissions(ctx, &args, opts...)
			var s GetServerPermissionsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetServerPermissionsResultOutput)
}

// A collection of arguments for invoking getServerPermissions.
type GetServerPermissionsOutputArgs struct {
	// ID of the principal who will be granted `permission`. Can be retrieved using `ServerRole` or `SqlLogin`.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
}

func (GetServerPermissionsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerPermissionsArgs)(nil)).Elem()
}

// A collection of values returned by getServerPermissions.
type GetServerPermissionsResultOutput struct{ *pulumi.OutputState }

func (GetServerPermissionsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerPermissionsResult)(nil)).Elem()
}

func (o GetServerPermissionsResultOutput) ToGetServerPermissionsResultOutput() GetServerPermissionsResultOutput {
	return o
}

func (o GetServerPermissionsResultOutput) ToGetServerPermissionsResultOutputWithContext(ctx context.Context) GetServerPermissionsResultOutput {
	return o
}

// Equals to `principalId`.
func (o GetServerPermissionsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerPermissionsResult) string { return v.Id }).(pulumi.StringOutput)
}

// Set of permissions granted to the principal
func (o GetServerPermissionsResultOutput) Permissions() GetServerPermissionsPermissionArrayOutput {
	return o.ApplyT(func(v GetServerPermissionsResult) []GetServerPermissionsPermission { return v.Permissions }).(GetServerPermissionsPermissionArrayOutput)
}

// ID of the principal who will be granted `permission`. Can be retrieved using `ServerRole` or `SqlLogin`.
func (o GetServerPermissionsResultOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerPermissionsResult) string { return v.PrincipalId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetServerPermissionsResultOutput{})
}
