// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mssql

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-mssql/sdk/go/mssql/internal"
)

// Obtains information about single SQL database user.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-mssql/sdk/go/mssql"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			master, err := mssql.LookupDatabase(ctx, &mssql.LookupDatabaseArgs{
//				Name: "master",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			example, err := mssql.LookupSqlUser(ctx, &mssql.LookupSqlUserArgs{
//				Name:       "dbo",
//				DatabaseId: pulumi.StringRef(master.Id),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("id", example.Id)
//			return nil
//		})
//	}
//
// ```
func LookupSqlUser(ctx *pulumi.Context, args *LookupSqlUserArgs, opts ...pulumi.InvokeOption) (*LookupSqlUserResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSqlUserResult
	err := ctx.Invoke("mssql:index/getSqlUser:getSqlUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSqlUser.
type LookupSqlUserArgs struct {
	// ID of database. Can be retrieved using `Database` or `SELECT DB_ID('<db_name>')`.
	DatabaseId *string `pulumi:"databaseId"`
	// User name. Cannot be longer than 128 chars.
	Name string `pulumi:"name"`
}

// A collection of values returned by getSqlUser.
type LookupSqlUserResult struct {
	// ID of database. Can be retrieved using `Database` or `SELECT DB_ID('<db_name>')`.
	DatabaseId string `pulumi:"databaseId"`
	// `<database_id>/<user_id>`. User ID can be retrieved using `SELECT DATABASE_PRINCIPAL_ID('<user_name>')`.
	Id string `pulumi:"id"`
	// SID of SQL login. Can be retrieved using `SqlLogin` or `SELECT SUSER_SID('<login_name>')`.
	LoginId string `pulumi:"loginId"`
	// User name. Cannot be longer than 128 chars.
	Name string `pulumi:"name"`
}

func LookupSqlUserOutput(ctx *pulumi.Context, args LookupSqlUserOutputArgs, opts ...pulumi.InvokeOption) LookupSqlUserResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSqlUserResultOutput, error) {
			args := v.(LookupSqlUserArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupSqlUserResult
			secret, err := ctx.InvokePackageRaw("mssql:index/getSqlUser:getSqlUser", args, &rv, "", opts...)
			if err != nil {
				return LookupSqlUserResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupSqlUserResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupSqlUserResultOutput), nil
			}
			return output, nil
		}).(LookupSqlUserResultOutput)
}

// A collection of arguments for invoking getSqlUser.
type LookupSqlUserOutputArgs struct {
	// ID of database. Can be retrieved using `Database` or `SELECT DB_ID('<db_name>')`.
	DatabaseId pulumi.StringPtrInput `pulumi:"databaseId"`
	// User name. Cannot be longer than 128 chars.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupSqlUserOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSqlUserArgs)(nil)).Elem()
}

// A collection of values returned by getSqlUser.
type LookupSqlUserResultOutput struct{ *pulumi.OutputState }

func (LookupSqlUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSqlUserResult)(nil)).Elem()
}

func (o LookupSqlUserResultOutput) ToLookupSqlUserResultOutput() LookupSqlUserResultOutput {
	return o
}

func (o LookupSqlUserResultOutput) ToLookupSqlUserResultOutputWithContext(ctx context.Context) LookupSqlUserResultOutput {
	return o
}

// ID of database. Can be retrieved using `Database` or `SELECT DB_ID('<db_name>')`.
func (o LookupSqlUserResultOutput) DatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSqlUserResult) string { return v.DatabaseId }).(pulumi.StringOutput)
}

// `<database_id>/<user_id>`. User ID can be retrieved using `SELECT DATABASE_PRINCIPAL_ID('<user_name>')`.
func (o LookupSqlUserResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSqlUserResult) string { return v.Id }).(pulumi.StringOutput)
}

// SID of SQL login. Can be retrieved using `SqlLogin` or `SELECT SUSER_SID('<login_name>')`.
func (o LookupSqlUserResultOutput) LoginId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSqlUserResult) string { return v.LoginId }).(pulumi.StringOutput)
}

// User name. Cannot be longer than 128 chars.
func (o LookupSqlUserResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSqlUserResult) string { return v.Name }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSqlUserResultOutput{})
}
