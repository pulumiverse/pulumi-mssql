// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mssql

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ProviderAzureAuth struct {
	ClientId     *string `pulumi:"clientId"`
	ClientSecret *string `pulumi:"clientSecret"`
	TenantId     *string `pulumi:"tenantId"`
}

// ProviderAzureAuthInput is an input type that accepts ProviderAzureAuthArgs and ProviderAzureAuthOutput values.
// You can construct a concrete instance of `ProviderAzureAuthInput` via:
//
//	ProviderAzureAuthArgs{...}
type ProviderAzureAuthInput interface {
	pulumi.Input

	ToProviderAzureAuthOutput() ProviderAzureAuthOutput
	ToProviderAzureAuthOutputWithContext(context.Context) ProviderAzureAuthOutput
}

type ProviderAzureAuthArgs struct {
	ClientId     pulumi.StringPtrInput `pulumi:"clientId"`
	ClientSecret pulumi.StringPtrInput `pulumi:"clientSecret"`
	TenantId     pulumi.StringPtrInput `pulumi:"tenantId"`
}

func (ProviderAzureAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderAzureAuth)(nil)).Elem()
}

func (i ProviderAzureAuthArgs) ToProviderAzureAuthOutput() ProviderAzureAuthOutput {
	return i.ToProviderAzureAuthOutputWithContext(context.Background())
}

func (i ProviderAzureAuthArgs) ToProviderAzureAuthOutputWithContext(ctx context.Context) ProviderAzureAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAzureAuthOutput)
}

func (i ProviderAzureAuthArgs) ToProviderAzureAuthPtrOutput() ProviderAzureAuthPtrOutput {
	return i.ToProviderAzureAuthPtrOutputWithContext(context.Background())
}

func (i ProviderAzureAuthArgs) ToProviderAzureAuthPtrOutputWithContext(ctx context.Context) ProviderAzureAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAzureAuthOutput).ToProviderAzureAuthPtrOutputWithContext(ctx)
}

// ProviderAzureAuthPtrInput is an input type that accepts ProviderAzureAuthArgs, ProviderAzureAuthPtr and ProviderAzureAuthPtrOutput values.
// You can construct a concrete instance of `ProviderAzureAuthPtrInput` via:
//
//	        ProviderAzureAuthArgs{...}
//
//	or:
//
//	        nil
type ProviderAzureAuthPtrInput interface {
	pulumi.Input

	ToProviderAzureAuthPtrOutput() ProviderAzureAuthPtrOutput
	ToProviderAzureAuthPtrOutputWithContext(context.Context) ProviderAzureAuthPtrOutput
}

type providerAzureAuthPtrType ProviderAzureAuthArgs

func ProviderAzureAuthPtr(v *ProviderAzureAuthArgs) ProviderAzureAuthPtrInput {
	return (*providerAzureAuthPtrType)(v)
}

func (*providerAzureAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderAzureAuth)(nil)).Elem()
}

func (i *providerAzureAuthPtrType) ToProviderAzureAuthPtrOutput() ProviderAzureAuthPtrOutput {
	return i.ToProviderAzureAuthPtrOutputWithContext(context.Background())
}

func (i *providerAzureAuthPtrType) ToProviderAzureAuthPtrOutputWithContext(ctx context.Context) ProviderAzureAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAzureAuthPtrOutput)
}

type ProviderAzureAuthOutput struct{ *pulumi.OutputState }

func (ProviderAzureAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderAzureAuth)(nil)).Elem()
}

func (o ProviderAzureAuthOutput) ToProviderAzureAuthOutput() ProviderAzureAuthOutput {
	return o
}

func (o ProviderAzureAuthOutput) ToProviderAzureAuthOutputWithContext(ctx context.Context) ProviderAzureAuthOutput {
	return o
}

func (o ProviderAzureAuthOutput) ToProviderAzureAuthPtrOutput() ProviderAzureAuthPtrOutput {
	return o.ToProviderAzureAuthPtrOutputWithContext(context.Background())
}

func (o ProviderAzureAuthOutput) ToProviderAzureAuthPtrOutputWithContext(ctx context.Context) ProviderAzureAuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProviderAzureAuth) *ProviderAzureAuth {
		return &v
	}).(ProviderAzureAuthPtrOutput)
}

func (o ProviderAzureAuthOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAzureAuth) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

func (o ProviderAzureAuthOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAzureAuth) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

func (o ProviderAzureAuthOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAzureAuth) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

type ProviderAzureAuthPtrOutput struct{ *pulumi.OutputState }

func (ProviderAzureAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderAzureAuth)(nil)).Elem()
}

func (o ProviderAzureAuthPtrOutput) ToProviderAzureAuthPtrOutput() ProviderAzureAuthPtrOutput {
	return o
}

func (o ProviderAzureAuthPtrOutput) ToProviderAzureAuthPtrOutputWithContext(ctx context.Context) ProviderAzureAuthPtrOutput {
	return o
}

func (o ProviderAzureAuthPtrOutput) Elem() ProviderAzureAuthOutput {
	return o.ApplyT(func(v *ProviderAzureAuth) ProviderAzureAuth {
		if v != nil {
			return *v
		}
		var ret ProviderAzureAuth
		return ret
	}).(ProviderAzureAuthOutput)
}

func (o ProviderAzureAuthPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAzureAuth) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

func (o ProviderAzureAuthPtrOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAzureAuth) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecret
	}).(pulumi.StringPtrOutput)
}

func (o ProviderAzureAuthPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAzureAuth) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

type ProviderSqlAuth struct {
	Password string `pulumi:"password"`
	Username string `pulumi:"username"`
}

// ProviderSqlAuthInput is an input type that accepts ProviderSqlAuthArgs and ProviderSqlAuthOutput values.
// You can construct a concrete instance of `ProviderSqlAuthInput` via:
//
//	ProviderSqlAuthArgs{...}
type ProviderSqlAuthInput interface {
	pulumi.Input

	ToProviderSqlAuthOutput() ProviderSqlAuthOutput
	ToProviderSqlAuthOutputWithContext(context.Context) ProviderSqlAuthOutput
}

type ProviderSqlAuthArgs struct {
	Password pulumi.StringInput `pulumi:"password"`
	Username pulumi.StringInput `pulumi:"username"`
}

func (ProviderSqlAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderSqlAuth)(nil)).Elem()
}

func (i ProviderSqlAuthArgs) ToProviderSqlAuthOutput() ProviderSqlAuthOutput {
	return i.ToProviderSqlAuthOutputWithContext(context.Background())
}

func (i ProviderSqlAuthArgs) ToProviderSqlAuthOutputWithContext(ctx context.Context) ProviderSqlAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderSqlAuthOutput)
}

func (i ProviderSqlAuthArgs) ToProviderSqlAuthPtrOutput() ProviderSqlAuthPtrOutput {
	return i.ToProviderSqlAuthPtrOutputWithContext(context.Background())
}

func (i ProviderSqlAuthArgs) ToProviderSqlAuthPtrOutputWithContext(ctx context.Context) ProviderSqlAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderSqlAuthOutput).ToProviderSqlAuthPtrOutputWithContext(ctx)
}

// ProviderSqlAuthPtrInput is an input type that accepts ProviderSqlAuthArgs, ProviderSqlAuthPtr and ProviderSqlAuthPtrOutput values.
// You can construct a concrete instance of `ProviderSqlAuthPtrInput` via:
//
//	        ProviderSqlAuthArgs{...}
//
//	or:
//
//	        nil
type ProviderSqlAuthPtrInput interface {
	pulumi.Input

	ToProviderSqlAuthPtrOutput() ProviderSqlAuthPtrOutput
	ToProviderSqlAuthPtrOutputWithContext(context.Context) ProviderSqlAuthPtrOutput
}

type providerSqlAuthPtrType ProviderSqlAuthArgs

func ProviderSqlAuthPtr(v *ProviderSqlAuthArgs) ProviderSqlAuthPtrInput {
	return (*providerSqlAuthPtrType)(v)
}

func (*providerSqlAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderSqlAuth)(nil)).Elem()
}

func (i *providerSqlAuthPtrType) ToProviderSqlAuthPtrOutput() ProviderSqlAuthPtrOutput {
	return i.ToProviderSqlAuthPtrOutputWithContext(context.Background())
}

func (i *providerSqlAuthPtrType) ToProviderSqlAuthPtrOutputWithContext(ctx context.Context) ProviderSqlAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderSqlAuthPtrOutput)
}

type ProviderSqlAuthOutput struct{ *pulumi.OutputState }

func (ProviderSqlAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderSqlAuth)(nil)).Elem()
}

func (o ProviderSqlAuthOutput) ToProviderSqlAuthOutput() ProviderSqlAuthOutput {
	return o
}

func (o ProviderSqlAuthOutput) ToProviderSqlAuthOutputWithContext(ctx context.Context) ProviderSqlAuthOutput {
	return o
}

func (o ProviderSqlAuthOutput) ToProviderSqlAuthPtrOutput() ProviderSqlAuthPtrOutput {
	return o.ToProviderSqlAuthPtrOutputWithContext(context.Background())
}

func (o ProviderSqlAuthOutput) ToProviderSqlAuthPtrOutputWithContext(ctx context.Context) ProviderSqlAuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProviderSqlAuth) *ProviderSqlAuth {
		return &v
	}).(ProviderSqlAuthPtrOutput)
}

func (o ProviderSqlAuthOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderSqlAuth) string { return v.Password }).(pulumi.StringOutput)
}

func (o ProviderSqlAuthOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderSqlAuth) string { return v.Username }).(pulumi.StringOutput)
}

type ProviderSqlAuthPtrOutput struct{ *pulumi.OutputState }

func (ProviderSqlAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderSqlAuth)(nil)).Elem()
}

func (o ProviderSqlAuthPtrOutput) ToProviderSqlAuthPtrOutput() ProviderSqlAuthPtrOutput {
	return o
}

func (o ProviderSqlAuthPtrOutput) ToProviderSqlAuthPtrOutputWithContext(ctx context.Context) ProviderSqlAuthPtrOutput {
	return o
}

func (o ProviderSqlAuthPtrOutput) Elem() ProviderSqlAuthOutput {
	return o.ApplyT(func(v *ProviderSqlAuth) ProviderSqlAuth {
		if v != nil {
			return *v
		}
		var ret ProviderSqlAuth
		return ret
	}).(ProviderSqlAuthOutput)
}

func (o ProviderSqlAuthPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderSqlAuth) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

func (o ProviderSqlAuthPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderSqlAuth) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type GetDatabasePermissionsPermission struct {
	// Name of database-level SQL permission. For full list of supported permissions, see [docs](https://learn.microsoft.com/en-us/sql/t-sql/statements/grant-database-permissions-transact-sql?view=azuresqldb-current#remarks)
	Permission string `pulumi:"permission"`
	// When set to `true`, `principalId` will be allowed to grant the `permission` to other principals.
	WithGrantOption bool `pulumi:"withGrantOption"`
}

// GetDatabasePermissionsPermissionInput is an input type that accepts GetDatabasePermissionsPermissionArgs and GetDatabasePermissionsPermissionOutput values.
// You can construct a concrete instance of `GetDatabasePermissionsPermissionInput` via:
//
//	GetDatabasePermissionsPermissionArgs{...}
type GetDatabasePermissionsPermissionInput interface {
	pulumi.Input

	ToGetDatabasePermissionsPermissionOutput() GetDatabasePermissionsPermissionOutput
	ToGetDatabasePermissionsPermissionOutputWithContext(context.Context) GetDatabasePermissionsPermissionOutput
}

type GetDatabasePermissionsPermissionArgs struct {
	// Name of database-level SQL permission. For full list of supported permissions, see [docs](https://learn.microsoft.com/en-us/sql/t-sql/statements/grant-database-permissions-transact-sql?view=azuresqldb-current#remarks)
	Permission pulumi.StringInput `pulumi:"permission"`
	// When set to `true`, `principalId` will be allowed to grant the `permission` to other principals.
	WithGrantOption pulumi.BoolInput `pulumi:"withGrantOption"`
}

func (GetDatabasePermissionsPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabasePermissionsPermission)(nil)).Elem()
}

func (i GetDatabasePermissionsPermissionArgs) ToGetDatabasePermissionsPermissionOutput() GetDatabasePermissionsPermissionOutput {
	return i.ToGetDatabasePermissionsPermissionOutputWithContext(context.Background())
}

func (i GetDatabasePermissionsPermissionArgs) ToGetDatabasePermissionsPermissionOutputWithContext(ctx context.Context) GetDatabasePermissionsPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabasePermissionsPermissionOutput)
}

// GetDatabasePermissionsPermissionArrayInput is an input type that accepts GetDatabasePermissionsPermissionArray and GetDatabasePermissionsPermissionArrayOutput values.
// You can construct a concrete instance of `GetDatabasePermissionsPermissionArrayInput` via:
//
//	GetDatabasePermissionsPermissionArray{ GetDatabasePermissionsPermissionArgs{...} }
type GetDatabasePermissionsPermissionArrayInput interface {
	pulumi.Input

	ToGetDatabasePermissionsPermissionArrayOutput() GetDatabasePermissionsPermissionArrayOutput
	ToGetDatabasePermissionsPermissionArrayOutputWithContext(context.Context) GetDatabasePermissionsPermissionArrayOutput
}

type GetDatabasePermissionsPermissionArray []GetDatabasePermissionsPermissionInput

func (GetDatabasePermissionsPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatabasePermissionsPermission)(nil)).Elem()
}

func (i GetDatabasePermissionsPermissionArray) ToGetDatabasePermissionsPermissionArrayOutput() GetDatabasePermissionsPermissionArrayOutput {
	return i.ToGetDatabasePermissionsPermissionArrayOutputWithContext(context.Background())
}

func (i GetDatabasePermissionsPermissionArray) ToGetDatabasePermissionsPermissionArrayOutputWithContext(ctx context.Context) GetDatabasePermissionsPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabasePermissionsPermissionArrayOutput)
}

type GetDatabasePermissionsPermissionOutput struct{ *pulumi.OutputState }

func (GetDatabasePermissionsPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabasePermissionsPermission)(nil)).Elem()
}

func (o GetDatabasePermissionsPermissionOutput) ToGetDatabasePermissionsPermissionOutput() GetDatabasePermissionsPermissionOutput {
	return o
}

func (o GetDatabasePermissionsPermissionOutput) ToGetDatabasePermissionsPermissionOutputWithContext(ctx context.Context) GetDatabasePermissionsPermissionOutput {
	return o
}

// Name of database-level SQL permission. For full list of supported permissions, see [docs](https://learn.microsoft.com/en-us/sql/t-sql/statements/grant-database-permissions-transact-sql?view=azuresqldb-current#remarks)
func (o GetDatabasePermissionsPermissionOutput) Permission() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasePermissionsPermission) string { return v.Permission }).(pulumi.StringOutput)
}

// When set to `true`, `principalId` will be allowed to grant the `permission` to other principals.
func (o GetDatabasePermissionsPermissionOutput) WithGrantOption() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDatabasePermissionsPermission) bool { return v.WithGrantOption }).(pulumi.BoolOutput)
}

type GetDatabasePermissionsPermissionArrayOutput struct{ *pulumi.OutputState }

func (GetDatabasePermissionsPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatabasePermissionsPermission)(nil)).Elem()
}

func (o GetDatabasePermissionsPermissionArrayOutput) ToGetDatabasePermissionsPermissionArrayOutput() GetDatabasePermissionsPermissionArrayOutput {
	return o
}

func (o GetDatabasePermissionsPermissionArrayOutput) ToGetDatabasePermissionsPermissionArrayOutputWithContext(ctx context.Context) GetDatabasePermissionsPermissionArrayOutput {
	return o
}

func (o GetDatabasePermissionsPermissionArrayOutput) Index(i pulumi.IntInput) GetDatabasePermissionsPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDatabasePermissionsPermission {
		return vs[0].([]GetDatabasePermissionsPermission)[vs[1].(int)]
	}).(GetDatabasePermissionsPermissionOutput)
}

type GetDatabaseRoleMemberType struct {
	// `<database_id>/<member_id>`. Member ID can be retrieved using `SELECT DATABASE*PRINCIPAL*ID('\n\n')
	Id string `pulumi:"id"`
	// Name of the database principal.
	Name string `pulumi:"name"`
	// One of: `SQL_USER`, `DATABASE_ROLE`, `AZUREAD_USER`
	Type string `pulumi:"type"`
}

// GetDatabaseRoleMemberTypeInput is an input type that accepts GetDatabaseRoleMemberTypeArgs and GetDatabaseRoleMemberTypeOutput values.
// You can construct a concrete instance of `GetDatabaseRoleMemberTypeInput` via:
//
//	GetDatabaseRoleMemberTypeArgs{...}
type GetDatabaseRoleMemberTypeInput interface {
	pulumi.Input

	ToGetDatabaseRoleMemberTypeOutput() GetDatabaseRoleMemberTypeOutput
	ToGetDatabaseRoleMemberTypeOutputWithContext(context.Context) GetDatabaseRoleMemberTypeOutput
}

type GetDatabaseRoleMemberTypeArgs struct {
	// `<database_id>/<member_id>`. Member ID can be retrieved using `SELECT DATABASE*PRINCIPAL*ID('\n\n')
	Id pulumi.StringInput `pulumi:"id"`
	// Name of the database principal.
	Name pulumi.StringInput `pulumi:"name"`
	// One of: `SQL_USER`, `DATABASE_ROLE`, `AZUREAD_USER`
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetDatabaseRoleMemberTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabaseRoleMemberType)(nil)).Elem()
}

func (i GetDatabaseRoleMemberTypeArgs) ToGetDatabaseRoleMemberTypeOutput() GetDatabaseRoleMemberTypeOutput {
	return i.ToGetDatabaseRoleMemberTypeOutputWithContext(context.Background())
}

func (i GetDatabaseRoleMemberTypeArgs) ToGetDatabaseRoleMemberTypeOutputWithContext(ctx context.Context) GetDatabaseRoleMemberTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabaseRoleMemberTypeOutput)
}

// GetDatabaseRoleMemberTypeArrayInput is an input type that accepts GetDatabaseRoleMemberTypeArray and GetDatabaseRoleMemberTypeArrayOutput values.
// You can construct a concrete instance of `GetDatabaseRoleMemberTypeArrayInput` via:
//
//	GetDatabaseRoleMemberTypeArray{ GetDatabaseRoleMemberTypeArgs{...} }
type GetDatabaseRoleMemberTypeArrayInput interface {
	pulumi.Input

	ToGetDatabaseRoleMemberTypeArrayOutput() GetDatabaseRoleMemberTypeArrayOutput
	ToGetDatabaseRoleMemberTypeArrayOutputWithContext(context.Context) GetDatabaseRoleMemberTypeArrayOutput
}

type GetDatabaseRoleMemberTypeArray []GetDatabaseRoleMemberTypeInput

func (GetDatabaseRoleMemberTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatabaseRoleMemberType)(nil)).Elem()
}

func (i GetDatabaseRoleMemberTypeArray) ToGetDatabaseRoleMemberTypeArrayOutput() GetDatabaseRoleMemberTypeArrayOutput {
	return i.ToGetDatabaseRoleMemberTypeArrayOutputWithContext(context.Background())
}

func (i GetDatabaseRoleMemberTypeArray) ToGetDatabaseRoleMemberTypeArrayOutputWithContext(ctx context.Context) GetDatabaseRoleMemberTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabaseRoleMemberTypeArrayOutput)
}

type GetDatabaseRoleMemberTypeOutput struct{ *pulumi.OutputState }

func (GetDatabaseRoleMemberTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabaseRoleMemberType)(nil)).Elem()
}

func (o GetDatabaseRoleMemberTypeOutput) ToGetDatabaseRoleMemberTypeOutput() GetDatabaseRoleMemberTypeOutput {
	return o
}

func (o GetDatabaseRoleMemberTypeOutput) ToGetDatabaseRoleMemberTypeOutputWithContext(ctx context.Context) GetDatabaseRoleMemberTypeOutput {
	return o
}

// `<database_id>/<member_id>`. Member ID can be retrieved using `SELECT DATABASE*PRINCIPAL*ID('\n\n')
func (o GetDatabaseRoleMemberTypeOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseRoleMemberType) string { return v.Id }).(pulumi.StringOutput)
}

// Name of the database principal.
func (o GetDatabaseRoleMemberTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseRoleMemberType) string { return v.Name }).(pulumi.StringOutput)
}

// One of: `SQL_USER`, `DATABASE_ROLE`, `AZUREAD_USER`
func (o GetDatabaseRoleMemberTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseRoleMemberType) string { return v.Type }).(pulumi.StringOutput)
}

type GetDatabaseRoleMemberTypeArrayOutput struct{ *pulumi.OutputState }

func (GetDatabaseRoleMemberTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatabaseRoleMemberType)(nil)).Elem()
}

func (o GetDatabaseRoleMemberTypeArrayOutput) ToGetDatabaseRoleMemberTypeArrayOutput() GetDatabaseRoleMemberTypeArrayOutput {
	return o
}

func (o GetDatabaseRoleMemberTypeArrayOutput) ToGetDatabaseRoleMemberTypeArrayOutputWithContext(ctx context.Context) GetDatabaseRoleMemberTypeArrayOutput {
	return o
}

func (o GetDatabaseRoleMemberTypeArrayOutput) Index(i pulumi.IntInput) GetDatabaseRoleMemberTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDatabaseRoleMemberType {
		return vs[0].([]GetDatabaseRoleMemberType)[vs[1].(int)]
	}).(GetDatabaseRoleMemberTypeOutput)
}

type GetDatabaseRolesRole struct {
	// ID of database. Can be retrieved using `Database` or `SELECT DB_ID('<db_name>')`.
	DatabaseId string `pulumi:"databaseId"`
	// `<database_id>/<role_id>`. Role ID can be retrieved using `SELECT DATABASE_PRINCIPAL_ID('<role_name>')`
	Id string `pulumi:"id"`
	// Role name. Must follow [Regular Identifiers rules](https://docs.microsoft.com/en-us/sql/relational-databases/databases/database-identifiers#rules-for-regular-identifiers) and cannot be longer than 128 chars.
	Name string `pulumi:"name"`
	// ID of another database role or user owning this role. Can be retrieved using `DatabaseRole` or `SqlUser`.
	OwnerId string `pulumi:"ownerId"`
}

// GetDatabaseRolesRoleInput is an input type that accepts GetDatabaseRolesRoleArgs and GetDatabaseRolesRoleOutput values.
// You can construct a concrete instance of `GetDatabaseRolesRoleInput` via:
//
//	GetDatabaseRolesRoleArgs{...}
type GetDatabaseRolesRoleInput interface {
	pulumi.Input

	ToGetDatabaseRolesRoleOutput() GetDatabaseRolesRoleOutput
	ToGetDatabaseRolesRoleOutputWithContext(context.Context) GetDatabaseRolesRoleOutput
}

type GetDatabaseRolesRoleArgs struct {
	// ID of database. Can be retrieved using `Database` or `SELECT DB_ID('<db_name>')`.
	DatabaseId pulumi.StringInput `pulumi:"databaseId"`
	// `<database_id>/<role_id>`. Role ID can be retrieved using `SELECT DATABASE_PRINCIPAL_ID('<role_name>')`
	Id pulumi.StringInput `pulumi:"id"`
	// Role name. Must follow [Regular Identifiers rules](https://docs.microsoft.com/en-us/sql/relational-databases/databases/database-identifiers#rules-for-regular-identifiers) and cannot be longer than 128 chars.
	Name pulumi.StringInput `pulumi:"name"`
	// ID of another database role or user owning this role. Can be retrieved using `DatabaseRole` or `SqlUser`.
	OwnerId pulumi.StringInput `pulumi:"ownerId"`
}

func (GetDatabaseRolesRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabaseRolesRole)(nil)).Elem()
}

func (i GetDatabaseRolesRoleArgs) ToGetDatabaseRolesRoleOutput() GetDatabaseRolesRoleOutput {
	return i.ToGetDatabaseRolesRoleOutputWithContext(context.Background())
}

func (i GetDatabaseRolesRoleArgs) ToGetDatabaseRolesRoleOutputWithContext(ctx context.Context) GetDatabaseRolesRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabaseRolesRoleOutput)
}

// GetDatabaseRolesRoleArrayInput is an input type that accepts GetDatabaseRolesRoleArray and GetDatabaseRolesRoleArrayOutput values.
// You can construct a concrete instance of `GetDatabaseRolesRoleArrayInput` via:
//
//	GetDatabaseRolesRoleArray{ GetDatabaseRolesRoleArgs{...} }
type GetDatabaseRolesRoleArrayInput interface {
	pulumi.Input

	ToGetDatabaseRolesRoleArrayOutput() GetDatabaseRolesRoleArrayOutput
	ToGetDatabaseRolesRoleArrayOutputWithContext(context.Context) GetDatabaseRolesRoleArrayOutput
}

type GetDatabaseRolesRoleArray []GetDatabaseRolesRoleInput

func (GetDatabaseRolesRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatabaseRolesRole)(nil)).Elem()
}

func (i GetDatabaseRolesRoleArray) ToGetDatabaseRolesRoleArrayOutput() GetDatabaseRolesRoleArrayOutput {
	return i.ToGetDatabaseRolesRoleArrayOutputWithContext(context.Background())
}

func (i GetDatabaseRolesRoleArray) ToGetDatabaseRolesRoleArrayOutputWithContext(ctx context.Context) GetDatabaseRolesRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabaseRolesRoleArrayOutput)
}

type GetDatabaseRolesRoleOutput struct{ *pulumi.OutputState }

func (GetDatabaseRolesRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabaseRolesRole)(nil)).Elem()
}

func (o GetDatabaseRolesRoleOutput) ToGetDatabaseRolesRoleOutput() GetDatabaseRolesRoleOutput {
	return o
}

func (o GetDatabaseRolesRoleOutput) ToGetDatabaseRolesRoleOutputWithContext(ctx context.Context) GetDatabaseRolesRoleOutput {
	return o
}

// ID of database. Can be retrieved using `Database` or `SELECT DB_ID('<db_name>')`.
func (o GetDatabaseRolesRoleOutput) DatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseRolesRole) string { return v.DatabaseId }).(pulumi.StringOutput)
}

// `<database_id>/<role_id>`. Role ID can be retrieved using `SELECT DATABASE_PRINCIPAL_ID('<role_name>')`
func (o GetDatabaseRolesRoleOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseRolesRole) string { return v.Id }).(pulumi.StringOutput)
}

// Role name. Must follow [Regular Identifiers rules](https://docs.microsoft.com/en-us/sql/relational-databases/databases/database-identifiers#rules-for-regular-identifiers) and cannot be longer than 128 chars.
func (o GetDatabaseRolesRoleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseRolesRole) string { return v.Name }).(pulumi.StringOutput)
}

// ID of another database role or user owning this role. Can be retrieved using `DatabaseRole` or `SqlUser`.
func (o GetDatabaseRolesRoleOutput) OwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseRolesRole) string { return v.OwnerId }).(pulumi.StringOutput)
}

type GetDatabaseRolesRoleArrayOutput struct{ *pulumi.OutputState }

func (GetDatabaseRolesRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatabaseRolesRole)(nil)).Elem()
}

func (o GetDatabaseRolesRoleArrayOutput) ToGetDatabaseRolesRoleArrayOutput() GetDatabaseRolesRoleArrayOutput {
	return o
}

func (o GetDatabaseRolesRoleArrayOutput) ToGetDatabaseRolesRoleArrayOutputWithContext(ctx context.Context) GetDatabaseRolesRoleArrayOutput {
	return o
}

func (o GetDatabaseRolesRoleArrayOutput) Index(i pulumi.IntInput) GetDatabaseRolesRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDatabaseRolesRole {
		return vs[0].([]GetDatabaseRolesRole)[vs[1].(int)]
	}).(GetDatabaseRolesRoleOutput)
}

type GetDatabasesDatabase struct {
	// Default collation name. Can be either a Windows collation name or a SQL collation name.
	Collation string `pulumi:"collation"`
	// Database ID. Can be retrieved using `SELECT DB_ID('<db_name>')`.
	Id string `pulumi:"id"`
	// Database name. Must follow [Regular Identifiers rules](https://docs.microsoft.com/en-us/sql/relational-databases/databases/database-identifiers#rules-for-regular-identifiers).
	Name string `pulumi:"name"`
}

// GetDatabasesDatabaseInput is an input type that accepts GetDatabasesDatabaseArgs and GetDatabasesDatabaseOutput values.
// You can construct a concrete instance of `GetDatabasesDatabaseInput` via:
//
//	GetDatabasesDatabaseArgs{...}
type GetDatabasesDatabaseInput interface {
	pulumi.Input

	ToGetDatabasesDatabaseOutput() GetDatabasesDatabaseOutput
	ToGetDatabasesDatabaseOutputWithContext(context.Context) GetDatabasesDatabaseOutput
}

type GetDatabasesDatabaseArgs struct {
	// Default collation name. Can be either a Windows collation name or a SQL collation name.
	Collation pulumi.StringInput `pulumi:"collation"`
	// Database ID. Can be retrieved using `SELECT DB_ID('<db_name>')`.
	Id pulumi.StringInput `pulumi:"id"`
	// Database name. Must follow [Regular Identifiers rules](https://docs.microsoft.com/en-us/sql/relational-databases/databases/database-identifiers#rules-for-regular-identifiers).
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetDatabasesDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabasesDatabase)(nil)).Elem()
}

func (i GetDatabasesDatabaseArgs) ToGetDatabasesDatabaseOutput() GetDatabasesDatabaseOutput {
	return i.ToGetDatabasesDatabaseOutputWithContext(context.Background())
}

func (i GetDatabasesDatabaseArgs) ToGetDatabasesDatabaseOutputWithContext(ctx context.Context) GetDatabasesDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabasesDatabaseOutput)
}

// GetDatabasesDatabaseArrayInput is an input type that accepts GetDatabasesDatabaseArray and GetDatabasesDatabaseArrayOutput values.
// You can construct a concrete instance of `GetDatabasesDatabaseArrayInput` via:
//
//	GetDatabasesDatabaseArray{ GetDatabasesDatabaseArgs{...} }
type GetDatabasesDatabaseArrayInput interface {
	pulumi.Input

	ToGetDatabasesDatabaseArrayOutput() GetDatabasesDatabaseArrayOutput
	ToGetDatabasesDatabaseArrayOutputWithContext(context.Context) GetDatabasesDatabaseArrayOutput
}

type GetDatabasesDatabaseArray []GetDatabasesDatabaseInput

func (GetDatabasesDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatabasesDatabase)(nil)).Elem()
}

func (i GetDatabasesDatabaseArray) ToGetDatabasesDatabaseArrayOutput() GetDatabasesDatabaseArrayOutput {
	return i.ToGetDatabasesDatabaseArrayOutputWithContext(context.Background())
}

func (i GetDatabasesDatabaseArray) ToGetDatabasesDatabaseArrayOutputWithContext(ctx context.Context) GetDatabasesDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabasesDatabaseArrayOutput)
}

type GetDatabasesDatabaseOutput struct{ *pulumi.OutputState }

func (GetDatabasesDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabasesDatabase)(nil)).Elem()
}

func (o GetDatabasesDatabaseOutput) ToGetDatabasesDatabaseOutput() GetDatabasesDatabaseOutput {
	return o
}

func (o GetDatabasesDatabaseOutput) ToGetDatabasesDatabaseOutputWithContext(ctx context.Context) GetDatabasesDatabaseOutput {
	return o
}

// Default collation name. Can be either a Windows collation name or a SQL collation name.
func (o GetDatabasesDatabaseOutput) Collation() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) string { return v.Collation }).(pulumi.StringOutput)
}

// Database ID. Can be retrieved using `SELECT DB_ID('<db_name>')`.
func (o GetDatabasesDatabaseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) string { return v.Id }).(pulumi.StringOutput)
}

// Database name. Must follow [Regular Identifiers rules](https://docs.microsoft.com/en-us/sql/relational-databases/databases/database-identifiers#rules-for-regular-identifiers).
func (o GetDatabasesDatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) string { return v.Name }).(pulumi.StringOutput)
}

type GetDatabasesDatabaseArrayOutput struct{ *pulumi.OutputState }

func (GetDatabasesDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatabasesDatabase)(nil)).Elem()
}

func (o GetDatabasesDatabaseArrayOutput) ToGetDatabasesDatabaseArrayOutput() GetDatabasesDatabaseArrayOutput {
	return o
}

func (o GetDatabasesDatabaseArrayOutput) ToGetDatabasesDatabaseArrayOutputWithContext(ctx context.Context) GetDatabasesDatabaseArrayOutput {
	return o
}

func (o GetDatabasesDatabaseArrayOutput) Index(i pulumi.IntInput) GetDatabasesDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDatabasesDatabase {
		return vs[0].([]GetDatabasesDatabase)[vs[1].(int)]
	}).(GetDatabasesDatabaseOutput)
}

type GetSchemaPermissionsPermission struct {
	// Name of schema SQL permission. For full list of supported permissions, see [docs](https://learn.microsoft.com/en-us/sql/t-sql/statements/grant-schema-permissions-transact-sql?view=azuresqldb-current#remarks)
	Permission string `pulumi:"permission"`
	// When set to `true`, `principalId` will be allowed to grant the `permission` to other principals.
	WithGrantOption bool `pulumi:"withGrantOption"`
}

// GetSchemaPermissionsPermissionInput is an input type that accepts GetSchemaPermissionsPermissionArgs and GetSchemaPermissionsPermissionOutput values.
// You can construct a concrete instance of `GetSchemaPermissionsPermissionInput` via:
//
//	GetSchemaPermissionsPermissionArgs{...}
type GetSchemaPermissionsPermissionInput interface {
	pulumi.Input

	ToGetSchemaPermissionsPermissionOutput() GetSchemaPermissionsPermissionOutput
	ToGetSchemaPermissionsPermissionOutputWithContext(context.Context) GetSchemaPermissionsPermissionOutput
}

type GetSchemaPermissionsPermissionArgs struct {
	// Name of schema SQL permission. For full list of supported permissions, see [docs](https://learn.microsoft.com/en-us/sql/t-sql/statements/grant-schema-permissions-transact-sql?view=azuresqldb-current#remarks)
	Permission pulumi.StringInput `pulumi:"permission"`
	// When set to `true`, `principalId` will be allowed to grant the `permission` to other principals.
	WithGrantOption pulumi.BoolInput `pulumi:"withGrantOption"`
}

func (GetSchemaPermissionsPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemaPermissionsPermission)(nil)).Elem()
}

func (i GetSchemaPermissionsPermissionArgs) ToGetSchemaPermissionsPermissionOutput() GetSchemaPermissionsPermissionOutput {
	return i.ToGetSchemaPermissionsPermissionOutputWithContext(context.Background())
}

func (i GetSchemaPermissionsPermissionArgs) ToGetSchemaPermissionsPermissionOutputWithContext(ctx context.Context) GetSchemaPermissionsPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemaPermissionsPermissionOutput)
}

// GetSchemaPermissionsPermissionArrayInput is an input type that accepts GetSchemaPermissionsPermissionArray and GetSchemaPermissionsPermissionArrayOutput values.
// You can construct a concrete instance of `GetSchemaPermissionsPermissionArrayInput` via:
//
//	GetSchemaPermissionsPermissionArray{ GetSchemaPermissionsPermissionArgs{...} }
type GetSchemaPermissionsPermissionArrayInput interface {
	pulumi.Input

	ToGetSchemaPermissionsPermissionArrayOutput() GetSchemaPermissionsPermissionArrayOutput
	ToGetSchemaPermissionsPermissionArrayOutputWithContext(context.Context) GetSchemaPermissionsPermissionArrayOutput
}

type GetSchemaPermissionsPermissionArray []GetSchemaPermissionsPermissionInput

func (GetSchemaPermissionsPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSchemaPermissionsPermission)(nil)).Elem()
}

func (i GetSchemaPermissionsPermissionArray) ToGetSchemaPermissionsPermissionArrayOutput() GetSchemaPermissionsPermissionArrayOutput {
	return i.ToGetSchemaPermissionsPermissionArrayOutputWithContext(context.Background())
}

func (i GetSchemaPermissionsPermissionArray) ToGetSchemaPermissionsPermissionArrayOutputWithContext(ctx context.Context) GetSchemaPermissionsPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemaPermissionsPermissionArrayOutput)
}

type GetSchemaPermissionsPermissionOutput struct{ *pulumi.OutputState }

func (GetSchemaPermissionsPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemaPermissionsPermission)(nil)).Elem()
}

func (o GetSchemaPermissionsPermissionOutput) ToGetSchemaPermissionsPermissionOutput() GetSchemaPermissionsPermissionOutput {
	return o
}

func (o GetSchemaPermissionsPermissionOutput) ToGetSchemaPermissionsPermissionOutputWithContext(ctx context.Context) GetSchemaPermissionsPermissionOutput {
	return o
}

// Name of schema SQL permission. For full list of supported permissions, see [docs](https://learn.microsoft.com/en-us/sql/t-sql/statements/grant-schema-permissions-transact-sql?view=azuresqldb-current#remarks)
func (o GetSchemaPermissionsPermissionOutput) Permission() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemaPermissionsPermission) string { return v.Permission }).(pulumi.StringOutput)
}

// When set to `true`, `principalId` will be allowed to grant the `permission` to other principals.
func (o GetSchemaPermissionsPermissionOutput) WithGrantOption() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSchemaPermissionsPermission) bool { return v.WithGrantOption }).(pulumi.BoolOutput)
}

type GetSchemaPermissionsPermissionArrayOutput struct{ *pulumi.OutputState }

func (GetSchemaPermissionsPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSchemaPermissionsPermission)(nil)).Elem()
}

func (o GetSchemaPermissionsPermissionArrayOutput) ToGetSchemaPermissionsPermissionArrayOutput() GetSchemaPermissionsPermissionArrayOutput {
	return o
}

func (o GetSchemaPermissionsPermissionArrayOutput) ToGetSchemaPermissionsPermissionArrayOutputWithContext(ctx context.Context) GetSchemaPermissionsPermissionArrayOutput {
	return o
}

func (o GetSchemaPermissionsPermissionArrayOutput) Index(i pulumi.IntInput) GetSchemaPermissionsPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSchemaPermissionsPermission {
		return vs[0].([]GetSchemaPermissionsPermission)[vs[1].(int)]
	}).(GetSchemaPermissionsPermissionOutput)
}

type GetSchemasSchema struct {
	// ID of database. Can be retrieved using `Database` or `SELECT DB_ID('<db_name>')`.
	DatabaseId string `pulumi:"databaseId"`
	// `<database_id>/<schema_id>`. Schema ID can be retrieved using `SELECT SCHEMA_ID('<schema_name>')`.
	Id string `pulumi:"id"`
	// Schema name.
	Name string `pulumi:"name"`
	// ID of database role or user owning this schema. Can be retrieved using `DatabaseRole`, `SqlUser`, `AzureadUser` or `AzureadServicePrincipal`
	OwnerId string `pulumi:"ownerId"`
}

// GetSchemasSchemaInput is an input type that accepts GetSchemasSchemaArgs and GetSchemasSchemaOutput values.
// You can construct a concrete instance of `GetSchemasSchemaInput` via:
//
//	GetSchemasSchemaArgs{...}
type GetSchemasSchemaInput interface {
	pulumi.Input

	ToGetSchemasSchemaOutput() GetSchemasSchemaOutput
	ToGetSchemasSchemaOutputWithContext(context.Context) GetSchemasSchemaOutput
}

type GetSchemasSchemaArgs struct {
	// ID of database. Can be retrieved using `Database` or `SELECT DB_ID('<db_name>')`.
	DatabaseId pulumi.StringInput `pulumi:"databaseId"`
	// `<database_id>/<schema_id>`. Schema ID can be retrieved using `SELECT SCHEMA_ID('<schema_name>')`.
	Id pulumi.StringInput `pulumi:"id"`
	// Schema name.
	Name pulumi.StringInput `pulumi:"name"`
	// ID of database role or user owning this schema. Can be retrieved using `DatabaseRole`, `SqlUser`, `AzureadUser` or `AzureadServicePrincipal`
	OwnerId pulumi.StringInput `pulumi:"ownerId"`
}

func (GetSchemasSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemasSchema)(nil)).Elem()
}

func (i GetSchemasSchemaArgs) ToGetSchemasSchemaOutput() GetSchemasSchemaOutput {
	return i.ToGetSchemasSchemaOutputWithContext(context.Background())
}

func (i GetSchemasSchemaArgs) ToGetSchemasSchemaOutputWithContext(ctx context.Context) GetSchemasSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemasSchemaOutput)
}

// GetSchemasSchemaArrayInput is an input type that accepts GetSchemasSchemaArray and GetSchemasSchemaArrayOutput values.
// You can construct a concrete instance of `GetSchemasSchemaArrayInput` via:
//
//	GetSchemasSchemaArray{ GetSchemasSchemaArgs{...} }
type GetSchemasSchemaArrayInput interface {
	pulumi.Input

	ToGetSchemasSchemaArrayOutput() GetSchemasSchemaArrayOutput
	ToGetSchemasSchemaArrayOutputWithContext(context.Context) GetSchemasSchemaArrayOutput
}

type GetSchemasSchemaArray []GetSchemasSchemaInput

func (GetSchemasSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSchemasSchema)(nil)).Elem()
}

func (i GetSchemasSchemaArray) ToGetSchemasSchemaArrayOutput() GetSchemasSchemaArrayOutput {
	return i.ToGetSchemasSchemaArrayOutputWithContext(context.Background())
}

func (i GetSchemasSchemaArray) ToGetSchemasSchemaArrayOutputWithContext(ctx context.Context) GetSchemasSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemasSchemaArrayOutput)
}

type GetSchemasSchemaOutput struct{ *pulumi.OutputState }

func (GetSchemasSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemasSchema)(nil)).Elem()
}

func (o GetSchemasSchemaOutput) ToGetSchemasSchemaOutput() GetSchemasSchemaOutput {
	return o
}

func (o GetSchemasSchemaOutput) ToGetSchemasSchemaOutputWithContext(ctx context.Context) GetSchemasSchemaOutput {
	return o
}

// ID of database. Can be retrieved using `Database` or `SELECT DB_ID('<db_name>')`.
func (o GetSchemasSchemaOutput) DatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemasSchema) string { return v.DatabaseId }).(pulumi.StringOutput)
}

// `<database_id>/<schema_id>`. Schema ID can be retrieved using `SELECT SCHEMA_ID('<schema_name>')`.
func (o GetSchemasSchemaOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemasSchema) string { return v.Id }).(pulumi.StringOutput)
}

// Schema name.
func (o GetSchemasSchemaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemasSchema) string { return v.Name }).(pulumi.StringOutput)
}

// ID of database role or user owning this schema. Can be retrieved using `DatabaseRole`, `SqlUser`, `AzureadUser` or `AzureadServicePrincipal`
func (o GetSchemasSchemaOutput) OwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemasSchema) string { return v.OwnerId }).(pulumi.StringOutput)
}

type GetSchemasSchemaArrayOutput struct{ *pulumi.OutputState }

func (GetSchemasSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSchemasSchema)(nil)).Elem()
}

func (o GetSchemasSchemaArrayOutput) ToGetSchemasSchemaArrayOutput() GetSchemasSchemaArrayOutput {
	return o
}

func (o GetSchemasSchemaArrayOutput) ToGetSchemasSchemaArrayOutputWithContext(ctx context.Context) GetSchemasSchemaArrayOutput {
	return o
}

func (o GetSchemasSchemaArrayOutput) Index(i pulumi.IntInput) GetSchemasSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSchemasSchema {
		return vs[0].([]GetSchemasSchema)[vs[1].(int)]
	}).(GetSchemasSchemaOutput)
}

type GetServerPermissionsPermission struct {
	// Name of server-level SQL permission. For full list of supported permissions see [docs](https://learn.microsoft.com/en-us/sql/t-sql/statements/grant-server-permissions-transact-sql?view=azuresqldb-current#remarks)
	Permission string `pulumi:"permission"`
	// When set to `true`, `principalId` will be allowed to grant the `permission` to other principals.
	WithGrantOption bool `pulumi:"withGrantOption"`
}

// GetServerPermissionsPermissionInput is an input type that accepts GetServerPermissionsPermissionArgs and GetServerPermissionsPermissionOutput values.
// You can construct a concrete instance of `GetServerPermissionsPermissionInput` via:
//
//	GetServerPermissionsPermissionArgs{...}
type GetServerPermissionsPermissionInput interface {
	pulumi.Input

	ToGetServerPermissionsPermissionOutput() GetServerPermissionsPermissionOutput
	ToGetServerPermissionsPermissionOutputWithContext(context.Context) GetServerPermissionsPermissionOutput
}

type GetServerPermissionsPermissionArgs struct {
	// Name of server-level SQL permission. For full list of supported permissions see [docs](https://learn.microsoft.com/en-us/sql/t-sql/statements/grant-server-permissions-transact-sql?view=azuresqldb-current#remarks)
	Permission pulumi.StringInput `pulumi:"permission"`
	// When set to `true`, `principalId` will be allowed to grant the `permission` to other principals.
	WithGrantOption pulumi.BoolInput `pulumi:"withGrantOption"`
}

func (GetServerPermissionsPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerPermissionsPermission)(nil)).Elem()
}

func (i GetServerPermissionsPermissionArgs) ToGetServerPermissionsPermissionOutput() GetServerPermissionsPermissionOutput {
	return i.ToGetServerPermissionsPermissionOutputWithContext(context.Background())
}

func (i GetServerPermissionsPermissionArgs) ToGetServerPermissionsPermissionOutputWithContext(ctx context.Context) GetServerPermissionsPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerPermissionsPermissionOutput)
}

// GetServerPermissionsPermissionArrayInput is an input type that accepts GetServerPermissionsPermissionArray and GetServerPermissionsPermissionArrayOutput values.
// You can construct a concrete instance of `GetServerPermissionsPermissionArrayInput` via:
//
//	GetServerPermissionsPermissionArray{ GetServerPermissionsPermissionArgs{...} }
type GetServerPermissionsPermissionArrayInput interface {
	pulumi.Input

	ToGetServerPermissionsPermissionArrayOutput() GetServerPermissionsPermissionArrayOutput
	ToGetServerPermissionsPermissionArrayOutputWithContext(context.Context) GetServerPermissionsPermissionArrayOutput
}

type GetServerPermissionsPermissionArray []GetServerPermissionsPermissionInput

func (GetServerPermissionsPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerPermissionsPermission)(nil)).Elem()
}

func (i GetServerPermissionsPermissionArray) ToGetServerPermissionsPermissionArrayOutput() GetServerPermissionsPermissionArrayOutput {
	return i.ToGetServerPermissionsPermissionArrayOutputWithContext(context.Background())
}

func (i GetServerPermissionsPermissionArray) ToGetServerPermissionsPermissionArrayOutputWithContext(ctx context.Context) GetServerPermissionsPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerPermissionsPermissionArrayOutput)
}

type GetServerPermissionsPermissionOutput struct{ *pulumi.OutputState }

func (GetServerPermissionsPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerPermissionsPermission)(nil)).Elem()
}

func (o GetServerPermissionsPermissionOutput) ToGetServerPermissionsPermissionOutput() GetServerPermissionsPermissionOutput {
	return o
}

func (o GetServerPermissionsPermissionOutput) ToGetServerPermissionsPermissionOutputWithContext(ctx context.Context) GetServerPermissionsPermissionOutput {
	return o
}

// Name of server-level SQL permission. For full list of supported permissions see [docs](https://learn.microsoft.com/en-us/sql/t-sql/statements/grant-server-permissions-transact-sql?view=azuresqldb-current#remarks)
func (o GetServerPermissionsPermissionOutput) Permission() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerPermissionsPermission) string { return v.Permission }).(pulumi.StringOutput)
}

// When set to `true`, `principalId` will be allowed to grant the `permission` to other principals.
func (o GetServerPermissionsPermissionOutput) WithGrantOption() pulumi.BoolOutput {
	return o.ApplyT(func(v GetServerPermissionsPermission) bool { return v.WithGrantOption }).(pulumi.BoolOutput)
}

type GetServerPermissionsPermissionArrayOutput struct{ *pulumi.OutputState }

func (GetServerPermissionsPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerPermissionsPermission)(nil)).Elem()
}

func (o GetServerPermissionsPermissionArrayOutput) ToGetServerPermissionsPermissionArrayOutput() GetServerPermissionsPermissionArrayOutput {
	return o
}

func (o GetServerPermissionsPermissionArrayOutput) ToGetServerPermissionsPermissionArrayOutputWithContext(ctx context.Context) GetServerPermissionsPermissionArrayOutput {
	return o
}

func (o GetServerPermissionsPermissionArrayOutput) Index(i pulumi.IntInput) GetServerPermissionsPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServerPermissionsPermission {
		return vs[0].([]GetServerPermissionsPermission)[vs[1].(int)]
	}).(GetServerPermissionsPermissionOutput)
}

type GetServerRoleMemberType struct {
	// ID of the member principal
	Id string `pulumi:"id"`
	// Name of the server principal
	Name string `pulumi:"name"`
	// One of: `SQL_LOGIN`, `SERVER_ROLE`
	Type string `pulumi:"type"`
}

// GetServerRoleMemberTypeInput is an input type that accepts GetServerRoleMemberTypeArgs and GetServerRoleMemberTypeOutput values.
// You can construct a concrete instance of `GetServerRoleMemberTypeInput` via:
//
//	GetServerRoleMemberTypeArgs{...}
type GetServerRoleMemberTypeInput interface {
	pulumi.Input

	ToGetServerRoleMemberTypeOutput() GetServerRoleMemberTypeOutput
	ToGetServerRoleMemberTypeOutputWithContext(context.Context) GetServerRoleMemberTypeOutput
}

type GetServerRoleMemberTypeArgs struct {
	// ID of the member principal
	Id pulumi.StringInput `pulumi:"id"`
	// Name of the server principal
	Name pulumi.StringInput `pulumi:"name"`
	// One of: `SQL_LOGIN`, `SERVER_ROLE`
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetServerRoleMemberTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerRoleMemberType)(nil)).Elem()
}

func (i GetServerRoleMemberTypeArgs) ToGetServerRoleMemberTypeOutput() GetServerRoleMemberTypeOutput {
	return i.ToGetServerRoleMemberTypeOutputWithContext(context.Background())
}

func (i GetServerRoleMemberTypeArgs) ToGetServerRoleMemberTypeOutputWithContext(ctx context.Context) GetServerRoleMemberTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerRoleMemberTypeOutput)
}

// GetServerRoleMemberTypeArrayInput is an input type that accepts GetServerRoleMemberTypeArray and GetServerRoleMemberTypeArrayOutput values.
// You can construct a concrete instance of `GetServerRoleMemberTypeArrayInput` via:
//
//	GetServerRoleMemberTypeArray{ GetServerRoleMemberTypeArgs{...} }
type GetServerRoleMemberTypeArrayInput interface {
	pulumi.Input

	ToGetServerRoleMemberTypeArrayOutput() GetServerRoleMemberTypeArrayOutput
	ToGetServerRoleMemberTypeArrayOutputWithContext(context.Context) GetServerRoleMemberTypeArrayOutput
}

type GetServerRoleMemberTypeArray []GetServerRoleMemberTypeInput

func (GetServerRoleMemberTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerRoleMemberType)(nil)).Elem()
}

func (i GetServerRoleMemberTypeArray) ToGetServerRoleMemberTypeArrayOutput() GetServerRoleMemberTypeArrayOutput {
	return i.ToGetServerRoleMemberTypeArrayOutputWithContext(context.Background())
}

func (i GetServerRoleMemberTypeArray) ToGetServerRoleMemberTypeArrayOutputWithContext(ctx context.Context) GetServerRoleMemberTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerRoleMemberTypeArrayOutput)
}

type GetServerRoleMemberTypeOutput struct{ *pulumi.OutputState }

func (GetServerRoleMemberTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerRoleMemberType)(nil)).Elem()
}

func (o GetServerRoleMemberTypeOutput) ToGetServerRoleMemberTypeOutput() GetServerRoleMemberTypeOutput {
	return o
}

func (o GetServerRoleMemberTypeOutput) ToGetServerRoleMemberTypeOutputWithContext(ctx context.Context) GetServerRoleMemberTypeOutput {
	return o
}

// ID of the member principal
func (o GetServerRoleMemberTypeOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerRoleMemberType) string { return v.Id }).(pulumi.StringOutput)
}

// Name of the server principal
func (o GetServerRoleMemberTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerRoleMemberType) string { return v.Name }).(pulumi.StringOutput)
}

// One of: `SQL_LOGIN`, `SERVER_ROLE`
func (o GetServerRoleMemberTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerRoleMemberType) string { return v.Type }).(pulumi.StringOutput)
}

type GetServerRoleMemberTypeArrayOutput struct{ *pulumi.OutputState }

func (GetServerRoleMemberTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerRoleMemberType)(nil)).Elem()
}

func (o GetServerRoleMemberTypeArrayOutput) ToGetServerRoleMemberTypeArrayOutput() GetServerRoleMemberTypeArrayOutput {
	return o
}

func (o GetServerRoleMemberTypeArrayOutput) ToGetServerRoleMemberTypeArrayOutputWithContext(ctx context.Context) GetServerRoleMemberTypeArrayOutput {
	return o
}

func (o GetServerRoleMemberTypeArrayOutput) Index(i pulumi.IntInput) GetServerRoleMemberTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServerRoleMemberType {
		return vs[0].([]GetServerRoleMemberType)[vs[1].(int)]
	}).(GetServerRoleMemberTypeOutput)
}

type GetServerRolesRole struct {
	// Role principal ID.
	Id string `pulumi:"id"`
	// Role name. Must follow [Regular Identifiers rules](https://docs.microsoft.com/en-us/sql/relational-databases/databases/database-identifiers#rules-for-regular-identifiers) and cannot be longer than 128 chars.
	Name string `pulumi:"name"`
	// ID of another server role or login owning this role. Can be retrieved using `ServerRole` or `SqlLogin`.
	OwnerId string `pulumi:"ownerId"`
}

// GetServerRolesRoleInput is an input type that accepts GetServerRolesRoleArgs and GetServerRolesRoleOutput values.
// You can construct a concrete instance of `GetServerRolesRoleInput` via:
//
//	GetServerRolesRoleArgs{...}
type GetServerRolesRoleInput interface {
	pulumi.Input

	ToGetServerRolesRoleOutput() GetServerRolesRoleOutput
	ToGetServerRolesRoleOutputWithContext(context.Context) GetServerRolesRoleOutput
}

type GetServerRolesRoleArgs struct {
	// Role principal ID.
	Id pulumi.StringInput `pulumi:"id"`
	// Role name. Must follow [Regular Identifiers rules](https://docs.microsoft.com/en-us/sql/relational-databases/databases/database-identifiers#rules-for-regular-identifiers) and cannot be longer than 128 chars.
	Name pulumi.StringInput `pulumi:"name"`
	// ID of another server role or login owning this role. Can be retrieved using `ServerRole` or `SqlLogin`.
	OwnerId pulumi.StringInput `pulumi:"ownerId"`
}

func (GetServerRolesRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerRolesRole)(nil)).Elem()
}

func (i GetServerRolesRoleArgs) ToGetServerRolesRoleOutput() GetServerRolesRoleOutput {
	return i.ToGetServerRolesRoleOutputWithContext(context.Background())
}

func (i GetServerRolesRoleArgs) ToGetServerRolesRoleOutputWithContext(ctx context.Context) GetServerRolesRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerRolesRoleOutput)
}

// GetServerRolesRoleArrayInput is an input type that accepts GetServerRolesRoleArray and GetServerRolesRoleArrayOutput values.
// You can construct a concrete instance of `GetServerRolesRoleArrayInput` via:
//
//	GetServerRolesRoleArray{ GetServerRolesRoleArgs{...} }
type GetServerRolesRoleArrayInput interface {
	pulumi.Input

	ToGetServerRolesRoleArrayOutput() GetServerRolesRoleArrayOutput
	ToGetServerRolesRoleArrayOutputWithContext(context.Context) GetServerRolesRoleArrayOutput
}

type GetServerRolesRoleArray []GetServerRolesRoleInput

func (GetServerRolesRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerRolesRole)(nil)).Elem()
}

func (i GetServerRolesRoleArray) ToGetServerRolesRoleArrayOutput() GetServerRolesRoleArrayOutput {
	return i.ToGetServerRolesRoleArrayOutputWithContext(context.Background())
}

func (i GetServerRolesRoleArray) ToGetServerRolesRoleArrayOutputWithContext(ctx context.Context) GetServerRolesRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerRolesRoleArrayOutput)
}

type GetServerRolesRoleOutput struct{ *pulumi.OutputState }

func (GetServerRolesRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerRolesRole)(nil)).Elem()
}

func (o GetServerRolesRoleOutput) ToGetServerRolesRoleOutput() GetServerRolesRoleOutput {
	return o
}

func (o GetServerRolesRoleOutput) ToGetServerRolesRoleOutputWithContext(ctx context.Context) GetServerRolesRoleOutput {
	return o
}

// Role principal ID.
func (o GetServerRolesRoleOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerRolesRole) string { return v.Id }).(pulumi.StringOutput)
}

// Role name. Must follow [Regular Identifiers rules](https://docs.microsoft.com/en-us/sql/relational-databases/databases/database-identifiers#rules-for-regular-identifiers) and cannot be longer than 128 chars.
func (o GetServerRolesRoleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerRolesRole) string { return v.Name }).(pulumi.StringOutput)
}

// ID of another server role or login owning this role. Can be retrieved using `ServerRole` or `SqlLogin`.
func (o GetServerRolesRoleOutput) OwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerRolesRole) string { return v.OwnerId }).(pulumi.StringOutput)
}

type GetServerRolesRoleArrayOutput struct{ *pulumi.OutputState }

func (GetServerRolesRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerRolesRole)(nil)).Elem()
}

func (o GetServerRolesRoleArrayOutput) ToGetServerRolesRoleArrayOutput() GetServerRolesRoleArrayOutput {
	return o
}

func (o GetServerRolesRoleArrayOutput) ToGetServerRolesRoleArrayOutputWithContext(ctx context.Context) GetServerRolesRoleArrayOutput {
	return o
}

func (o GetServerRolesRoleArrayOutput) Index(i pulumi.IntInput) GetServerRolesRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServerRolesRole {
		return vs[0].([]GetServerRolesRole)[vs[1].(int)]
	}).(GetServerRolesRoleOutput)
}

type GetSqlLoginsLogin struct {
	// When `true`, password expiration policy is enforced for this login.
	CheckPasswordExpiration bool `pulumi:"checkPasswordExpiration"`
	// When `true`, the Windows password policies of the computer on which SQL Server is running are enforced on this login.
	CheckPasswordPolicy bool `pulumi:"checkPasswordPolicy"`
	// ID of login's default DB. The ID can be retrieved using `Database` data resource.
	DefaultDatabaseId string `pulumi:"defaultDatabaseId"`
	// Default language assigned to login.
	DefaultLanguage string `pulumi:"defaultLanguage"`
	// Login SID. Can be retrieved using `SELECT SUSER_SID('<login_name>')`.
	Id string `pulumi:"id"`
	// When true, password change will be forced on first logon.
	MustChangePassword bool `pulumi:"mustChangePassword"`
	// Login name. Must follow [Regular Identifiers rules](https://docs.microsoft.com/en-us/sql/relational-databases/databases/database-identifiers#rules-for-regular-identifiers) and cannot contain `\`
	Name string `pulumi:"name"`
	// ID used to reference SQL Login in other resources, e.g. `serverRole`. Can be retrieved from `sys.sql_logins`.
	PrincipalId string `pulumi:"principalId"`
}

// GetSqlLoginsLoginInput is an input type that accepts GetSqlLoginsLoginArgs and GetSqlLoginsLoginOutput values.
// You can construct a concrete instance of `GetSqlLoginsLoginInput` via:
//
//	GetSqlLoginsLoginArgs{...}
type GetSqlLoginsLoginInput interface {
	pulumi.Input

	ToGetSqlLoginsLoginOutput() GetSqlLoginsLoginOutput
	ToGetSqlLoginsLoginOutputWithContext(context.Context) GetSqlLoginsLoginOutput
}

type GetSqlLoginsLoginArgs struct {
	// When `true`, password expiration policy is enforced for this login.
	CheckPasswordExpiration pulumi.BoolInput `pulumi:"checkPasswordExpiration"`
	// When `true`, the Windows password policies of the computer on which SQL Server is running are enforced on this login.
	CheckPasswordPolicy pulumi.BoolInput `pulumi:"checkPasswordPolicy"`
	// ID of login's default DB. The ID can be retrieved using `Database` data resource.
	DefaultDatabaseId pulumi.StringInput `pulumi:"defaultDatabaseId"`
	// Default language assigned to login.
	DefaultLanguage pulumi.StringInput `pulumi:"defaultLanguage"`
	// Login SID. Can be retrieved using `SELECT SUSER_SID('<login_name>')`.
	Id pulumi.StringInput `pulumi:"id"`
	// When true, password change will be forced on first logon.
	MustChangePassword pulumi.BoolInput `pulumi:"mustChangePassword"`
	// Login name. Must follow [Regular Identifiers rules](https://docs.microsoft.com/en-us/sql/relational-databases/databases/database-identifiers#rules-for-regular-identifiers) and cannot contain `\`
	Name pulumi.StringInput `pulumi:"name"`
	// ID used to reference SQL Login in other resources, e.g. `serverRole`. Can be retrieved from `sys.sql_logins`.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
}

func (GetSqlLoginsLoginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSqlLoginsLogin)(nil)).Elem()
}

func (i GetSqlLoginsLoginArgs) ToGetSqlLoginsLoginOutput() GetSqlLoginsLoginOutput {
	return i.ToGetSqlLoginsLoginOutputWithContext(context.Background())
}

func (i GetSqlLoginsLoginArgs) ToGetSqlLoginsLoginOutputWithContext(ctx context.Context) GetSqlLoginsLoginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSqlLoginsLoginOutput)
}

// GetSqlLoginsLoginArrayInput is an input type that accepts GetSqlLoginsLoginArray and GetSqlLoginsLoginArrayOutput values.
// You can construct a concrete instance of `GetSqlLoginsLoginArrayInput` via:
//
//	GetSqlLoginsLoginArray{ GetSqlLoginsLoginArgs{...} }
type GetSqlLoginsLoginArrayInput interface {
	pulumi.Input

	ToGetSqlLoginsLoginArrayOutput() GetSqlLoginsLoginArrayOutput
	ToGetSqlLoginsLoginArrayOutputWithContext(context.Context) GetSqlLoginsLoginArrayOutput
}

type GetSqlLoginsLoginArray []GetSqlLoginsLoginInput

func (GetSqlLoginsLoginArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSqlLoginsLogin)(nil)).Elem()
}

func (i GetSqlLoginsLoginArray) ToGetSqlLoginsLoginArrayOutput() GetSqlLoginsLoginArrayOutput {
	return i.ToGetSqlLoginsLoginArrayOutputWithContext(context.Background())
}

func (i GetSqlLoginsLoginArray) ToGetSqlLoginsLoginArrayOutputWithContext(ctx context.Context) GetSqlLoginsLoginArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSqlLoginsLoginArrayOutput)
}

type GetSqlLoginsLoginOutput struct{ *pulumi.OutputState }

func (GetSqlLoginsLoginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSqlLoginsLogin)(nil)).Elem()
}

func (o GetSqlLoginsLoginOutput) ToGetSqlLoginsLoginOutput() GetSqlLoginsLoginOutput {
	return o
}

func (o GetSqlLoginsLoginOutput) ToGetSqlLoginsLoginOutputWithContext(ctx context.Context) GetSqlLoginsLoginOutput {
	return o
}

// When `true`, password expiration policy is enforced for this login.
func (o GetSqlLoginsLoginOutput) CheckPasswordExpiration() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSqlLoginsLogin) bool { return v.CheckPasswordExpiration }).(pulumi.BoolOutput)
}

// When `true`, the Windows password policies of the computer on which SQL Server is running are enforced on this login.
func (o GetSqlLoginsLoginOutput) CheckPasswordPolicy() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSqlLoginsLogin) bool { return v.CheckPasswordPolicy }).(pulumi.BoolOutput)
}

// ID of login's default DB. The ID can be retrieved using `Database` data resource.
func (o GetSqlLoginsLoginOutput) DefaultDatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlLoginsLogin) string { return v.DefaultDatabaseId }).(pulumi.StringOutput)
}

// Default language assigned to login.
func (o GetSqlLoginsLoginOutput) DefaultLanguage() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlLoginsLogin) string { return v.DefaultLanguage }).(pulumi.StringOutput)
}

// Login SID. Can be retrieved using `SELECT SUSER_SID('<login_name>')`.
func (o GetSqlLoginsLoginOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlLoginsLogin) string { return v.Id }).(pulumi.StringOutput)
}

// When true, password change will be forced on first logon.
func (o GetSqlLoginsLoginOutput) MustChangePassword() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSqlLoginsLogin) bool { return v.MustChangePassword }).(pulumi.BoolOutput)
}

// Login name. Must follow [Regular Identifiers rules](https://docs.microsoft.com/en-us/sql/relational-databases/databases/database-identifiers#rules-for-regular-identifiers) and cannot contain `\`
func (o GetSqlLoginsLoginOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlLoginsLogin) string { return v.Name }).(pulumi.StringOutput)
}

// ID used to reference SQL Login in other resources, e.g. `serverRole`. Can be retrieved from `sys.sql_logins`.
func (o GetSqlLoginsLoginOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlLoginsLogin) string { return v.PrincipalId }).(pulumi.StringOutput)
}

type GetSqlLoginsLoginArrayOutput struct{ *pulumi.OutputState }

func (GetSqlLoginsLoginArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSqlLoginsLogin)(nil)).Elem()
}

func (o GetSqlLoginsLoginArrayOutput) ToGetSqlLoginsLoginArrayOutput() GetSqlLoginsLoginArrayOutput {
	return o
}

func (o GetSqlLoginsLoginArrayOutput) ToGetSqlLoginsLoginArrayOutputWithContext(ctx context.Context) GetSqlLoginsLoginArrayOutput {
	return o
}

func (o GetSqlLoginsLoginArrayOutput) Index(i pulumi.IntInput) GetSqlLoginsLoginOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSqlLoginsLogin {
		return vs[0].([]GetSqlLoginsLogin)[vs[1].(int)]
	}).(GetSqlLoginsLoginOutput)
}

type GetSqlUsersUser struct {
	// ID of database. Can be retrieved using `Database` or `SELECT DB_ID('<db_name>')`.
	DatabaseId string `pulumi:"databaseId"`
	// `<database_id>/<user_id>`. User ID can be retrieved using `SELECT DATABASE_PRINCIPAL_ID('<user_name>')`.
	Id string `pulumi:"id"`
	// SID of SQL login. Can be retrieved using `SqlLogin` or `SELECT SUSER_SID('<login_name>')`.
	LoginId string `pulumi:"loginId"`
	// User name. Cannot be longer than 128 chars.
	Name string `pulumi:"name"`
}

// GetSqlUsersUserInput is an input type that accepts GetSqlUsersUserArgs and GetSqlUsersUserOutput values.
// You can construct a concrete instance of `GetSqlUsersUserInput` via:
//
//	GetSqlUsersUserArgs{...}
type GetSqlUsersUserInput interface {
	pulumi.Input

	ToGetSqlUsersUserOutput() GetSqlUsersUserOutput
	ToGetSqlUsersUserOutputWithContext(context.Context) GetSqlUsersUserOutput
}

type GetSqlUsersUserArgs struct {
	// ID of database. Can be retrieved using `Database` or `SELECT DB_ID('<db_name>')`.
	DatabaseId pulumi.StringInput `pulumi:"databaseId"`
	// `<database_id>/<user_id>`. User ID can be retrieved using `SELECT DATABASE_PRINCIPAL_ID('<user_name>')`.
	Id pulumi.StringInput `pulumi:"id"`
	// SID of SQL login. Can be retrieved using `SqlLogin` or `SELECT SUSER_SID('<login_name>')`.
	LoginId pulumi.StringInput `pulumi:"loginId"`
	// User name. Cannot be longer than 128 chars.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetSqlUsersUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSqlUsersUser)(nil)).Elem()
}

func (i GetSqlUsersUserArgs) ToGetSqlUsersUserOutput() GetSqlUsersUserOutput {
	return i.ToGetSqlUsersUserOutputWithContext(context.Background())
}

func (i GetSqlUsersUserArgs) ToGetSqlUsersUserOutputWithContext(ctx context.Context) GetSqlUsersUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSqlUsersUserOutput)
}

// GetSqlUsersUserArrayInput is an input type that accepts GetSqlUsersUserArray and GetSqlUsersUserArrayOutput values.
// You can construct a concrete instance of `GetSqlUsersUserArrayInput` via:
//
//	GetSqlUsersUserArray{ GetSqlUsersUserArgs{...} }
type GetSqlUsersUserArrayInput interface {
	pulumi.Input

	ToGetSqlUsersUserArrayOutput() GetSqlUsersUserArrayOutput
	ToGetSqlUsersUserArrayOutputWithContext(context.Context) GetSqlUsersUserArrayOutput
}

type GetSqlUsersUserArray []GetSqlUsersUserInput

func (GetSqlUsersUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSqlUsersUser)(nil)).Elem()
}

func (i GetSqlUsersUserArray) ToGetSqlUsersUserArrayOutput() GetSqlUsersUserArrayOutput {
	return i.ToGetSqlUsersUserArrayOutputWithContext(context.Background())
}

func (i GetSqlUsersUserArray) ToGetSqlUsersUserArrayOutputWithContext(ctx context.Context) GetSqlUsersUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSqlUsersUserArrayOutput)
}

type GetSqlUsersUserOutput struct{ *pulumi.OutputState }

func (GetSqlUsersUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSqlUsersUser)(nil)).Elem()
}

func (o GetSqlUsersUserOutput) ToGetSqlUsersUserOutput() GetSqlUsersUserOutput {
	return o
}

func (o GetSqlUsersUserOutput) ToGetSqlUsersUserOutputWithContext(ctx context.Context) GetSqlUsersUserOutput {
	return o
}

// ID of database. Can be retrieved using `Database` or `SELECT DB_ID('<db_name>')`.
func (o GetSqlUsersUserOutput) DatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlUsersUser) string { return v.DatabaseId }).(pulumi.StringOutput)
}

// `<database_id>/<user_id>`. User ID can be retrieved using `SELECT DATABASE_PRINCIPAL_ID('<user_name>')`.
func (o GetSqlUsersUserOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlUsersUser) string { return v.Id }).(pulumi.StringOutput)
}

// SID of SQL login. Can be retrieved using `SqlLogin` or `SELECT SUSER_SID('<login_name>')`.
func (o GetSqlUsersUserOutput) LoginId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlUsersUser) string { return v.LoginId }).(pulumi.StringOutput)
}

// User name. Cannot be longer than 128 chars.
func (o GetSqlUsersUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlUsersUser) string { return v.Name }).(pulumi.StringOutput)
}

type GetSqlUsersUserArrayOutput struct{ *pulumi.OutputState }

func (GetSqlUsersUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSqlUsersUser)(nil)).Elem()
}

func (o GetSqlUsersUserArrayOutput) ToGetSqlUsersUserArrayOutput() GetSqlUsersUserArrayOutput {
	return o
}

func (o GetSqlUsersUserArrayOutput) ToGetSqlUsersUserArrayOutputWithContext(ctx context.Context) GetSqlUsersUserArrayOutput {
	return o
}

func (o GetSqlUsersUserArrayOutput) Index(i pulumi.IntInput) GetSqlUsersUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSqlUsersUser {
		return vs[0].([]GetSqlUsersUser)[vs[1].(int)]
	}).(GetSqlUsersUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderAzureAuthInput)(nil)).Elem(), ProviderAzureAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderAzureAuthPtrInput)(nil)).Elem(), ProviderAzureAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderSqlAuthInput)(nil)).Elem(), ProviderSqlAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderSqlAuthPtrInput)(nil)).Elem(), ProviderSqlAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabasePermissionsPermissionInput)(nil)).Elem(), GetDatabasePermissionsPermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabasePermissionsPermissionArrayInput)(nil)).Elem(), GetDatabasePermissionsPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabaseRoleMemberTypeInput)(nil)).Elem(), GetDatabaseRoleMemberTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabaseRoleMemberTypeArrayInput)(nil)).Elem(), GetDatabaseRoleMemberTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabaseRolesRoleInput)(nil)).Elem(), GetDatabaseRolesRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabaseRolesRoleArrayInput)(nil)).Elem(), GetDatabaseRolesRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabasesDatabaseInput)(nil)).Elem(), GetDatabasesDatabaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabasesDatabaseArrayInput)(nil)).Elem(), GetDatabasesDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchemaPermissionsPermissionInput)(nil)).Elem(), GetSchemaPermissionsPermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchemaPermissionsPermissionArrayInput)(nil)).Elem(), GetSchemaPermissionsPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchemasSchemaInput)(nil)).Elem(), GetSchemasSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchemasSchemaArrayInput)(nil)).Elem(), GetSchemasSchemaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerPermissionsPermissionInput)(nil)).Elem(), GetServerPermissionsPermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerPermissionsPermissionArrayInput)(nil)).Elem(), GetServerPermissionsPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerRoleMemberTypeInput)(nil)).Elem(), GetServerRoleMemberTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerRoleMemberTypeArrayInput)(nil)).Elem(), GetServerRoleMemberTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerRolesRoleInput)(nil)).Elem(), GetServerRolesRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerRolesRoleArrayInput)(nil)).Elem(), GetServerRolesRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSqlLoginsLoginInput)(nil)).Elem(), GetSqlLoginsLoginArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSqlLoginsLoginArrayInput)(nil)).Elem(), GetSqlLoginsLoginArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSqlUsersUserInput)(nil)).Elem(), GetSqlUsersUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSqlUsersUserArrayInput)(nil)).Elem(), GetSqlUsersUserArray{})
	pulumi.RegisterOutputType(ProviderAzureAuthOutput{})
	pulumi.RegisterOutputType(ProviderAzureAuthPtrOutput{})
	pulumi.RegisterOutputType(ProviderSqlAuthOutput{})
	pulumi.RegisterOutputType(ProviderSqlAuthPtrOutput{})
	pulumi.RegisterOutputType(GetDatabasePermissionsPermissionOutput{})
	pulumi.RegisterOutputType(GetDatabasePermissionsPermissionArrayOutput{})
	pulumi.RegisterOutputType(GetDatabaseRoleMemberTypeOutput{})
	pulumi.RegisterOutputType(GetDatabaseRoleMemberTypeArrayOutput{})
	pulumi.RegisterOutputType(GetDatabaseRolesRoleOutput{})
	pulumi.RegisterOutputType(GetDatabaseRolesRoleArrayOutput{})
	pulumi.RegisterOutputType(GetDatabasesDatabaseOutput{})
	pulumi.RegisterOutputType(GetDatabasesDatabaseArrayOutput{})
	pulumi.RegisterOutputType(GetSchemaPermissionsPermissionOutput{})
	pulumi.RegisterOutputType(GetSchemaPermissionsPermissionArrayOutput{})
	pulumi.RegisterOutputType(GetSchemasSchemaOutput{})
	pulumi.RegisterOutputType(GetSchemasSchemaArrayOutput{})
	pulumi.RegisterOutputType(GetServerPermissionsPermissionOutput{})
	pulumi.RegisterOutputType(GetServerPermissionsPermissionArrayOutput{})
	pulumi.RegisterOutputType(GetServerRoleMemberTypeOutput{})
	pulumi.RegisterOutputType(GetServerRoleMemberTypeArrayOutput{})
	pulumi.RegisterOutputType(GetServerRolesRoleOutput{})
	pulumi.RegisterOutputType(GetServerRolesRoleArrayOutput{})
	pulumi.RegisterOutputType(GetSqlLoginsLoginOutput{})
	pulumi.RegisterOutputType(GetSqlLoginsLoginArrayOutput{})
	pulumi.RegisterOutputType(GetSqlUsersUserOutput{})
	pulumi.RegisterOutputType(GetSqlUsersUserArrayOutput{})
}
