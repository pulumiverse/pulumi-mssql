// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mssql

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages single login.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-mssql/sdk/go/mssql"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleDatabase, err := mssql.LookupDatabase(ctx, &mssql.LookupDatabaseArgs{
//				Name: "example",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleSqlLogin, err := mssql.NewSqlLogin(ctx, "exampleSqlLogin", &mssql.SqlLoginArgs{
//				Name:                    pulumi.String("example"),
//				Password:                pulumi.String("Str0ngPa$$word12"),
//				MustChangePassword:      pulumi.Bool(true),
//				DefaultDatabaseId:       *pulumi.String(exampleDatabase.Id),
//				DefaultLanguage:         pulumi.String("english"),
//				CheckPasswordExpiration: pulumi.Bool(true),
//				CheckPasswordPolicy:     pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("loginId", exampleSqlLogin.ID())
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// import using login ID - can be retrieved using `SELECT SUSER_SID('<login_name>')`
//
// ```sh
//
//	$ pulumi import mssql:index/sqlLogin:SqlLogin example 0x27578D8516843E4094EFA2CEED085C82
//
// ```
type SqlLogin struct {
	pulumi.CustomResourceState

	// When `true`, password expiration policy is enforced for this login. Defaults to `false`. -> **Note** In case of Azure
	// SQL, which does not support this feature, the flag will be ignored.
	CheckPasswordExpiration pulumi.BoolPtrOutput `pulumi:"checkPasswordExpiration"`
	// When `true`, the Windows password policies of the computer on which SQL Server is running are enforced on this login.
	// Defaults to `true`. -> **Note** In case of Azure SQL, which does not support this feature, the flag will be ignored.
	CheckPasswordPolicy pulumi.BoolPtrOutput `pulumi:"checkPasswordPolicy"`
	// ID of login's default DB. The ID can be retrieved using `mssql_database` data resource. Defaults to ID of `master`. ->
	// **Note** In case of Azure SQL, which does not support this feature, the flag will be ignored.
	DefaultDatabaseId pulumi.StringPtrOutput `pulumi:"defaultDatabaseId"`
	// Default language assigned to login. Defaults to current default language of the server. If the default language of the
	// server is later changed, the default language of the login remains unchanged. -> **Note** In case of Azure SQL, which
	// does not support this feature, the flag will be ignored.
	DefaultLanguage pulumi.StringPtrOutput `pulumi:"defaultLanguage"`
	// When true, password change will be forced on first logon. Defaults to `false`. -> **Note** After password is changed,
	// this flag is being reset to `false`, which will show as changes in Terraform plan. Use `ignore_changes` block to prevent
	// this behavior. -> **Note** In case of Azure SQL, which does not support this feature, the flag will be ignored.
	MustChangePassword pulumi.BoolPtrOutput `pulumi:"mustChangePassword"`
	// Login name. Must follow [Regular Identifiers rules](https://docs.microsoft.com/en-us/sql/relational-databases/databases/database-identifiers#rules-for-regular-identifiers) and cannot contain `\`
	Name pulumi.StringOutput `pulumi:"name"`
	// Password for the login. Must follow strong password policies defined for SQL server. Passwords are case-sensitive, length must be 8-128 chars, can include all characters except `'` or `name`.
	Password pulumi.StringOutput `pulumi:"password"`
	// ID used to reference SQL Login in other resources, e.g. `server_role`. Can be retrieved from `sys.sql_logins`.
	PrincipalId pulumi.StringOutput `pulumi:"principalId"`
}

// NewSqlLogin registers a new resource with the given unique name, arguments, and options.
func NewSqlLogin(ctx *pulumi.Context,
	name string, args *SqlLoginArgs, opts ...pulumi.ResourceOption) (*SqlLogin, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = pkgResourceDefaultOpts(opts)
	var resource SqlLogin
	err := ctx.RegisterResource("mssql:index/sqlLogin:SqlLogin", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSqlLogin gets an existing SqlLogin resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSqlLogin(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SqlLoginState, opts ...pulumi.ResourceOption) (*SqlLogin, error) {
	var resource SqlLogin
	err := ctx.ReadResource("mssql:index/sqlLogin:SqlLogin", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SqlLogin resources.
type sqlLoginState struct {
	// When `true`, password expiration policy is enforced for this login. Defaults to `false`. -> **Note** In case of Azure
	// SQL, which does not support this feature, the flag will be ignored.
	CheckPasswordExpiration *bool `pulumi:"checkPasswordExpiration"`
	// When `true`, the Windows password policies of the computer on which SQL Server is running are enforced on this login.
	// Defaults to `true`. -> **Note** In case of Azure SQL, which does not support this feature, the flag will be ignored.
	CheckPasswordPolicy *bool `pulumi:"checkPasswordPolicy"`
	// ID of login's default DB. The ID can be retrieved using `mssql_database` data resource. Defaults to ID of `master`. ->
	// **Note** In case of Azure SQL, which does not support this feature, the flag will be ignored.
	DefaultDatabaseId *string `pulumi:"defaultDatabaseId"`
	// Default language assigned to login. Defaults to current default language of the server. If the default language of the
	// server is later changed, the default language of the login remains unchanged. -> **Note** In case of Azure SQL, which
	// does not support this feature, the flag will be ignored.
	DefaultLanguage *string `pulumi:"defaultLanguage"`
	// When true, password change will be forced on first logon. Defaults to `false`. -> **Note** After password is changed,
	// this flag is being reset to `false`, which will show as changes in Terraform plan. Use `ignore_changes` block to prevent
	// this behavior. -> **Note** In case of Azure SQL, which does not support this feature, the flag will be ignored.
	MustChangePassword *bool `pulumi:"mustChangePassword"`
	// Login name. Must follow [Regular Identifiers rules](https://docs.microsoft.com/en-us/sql/relational-databases/databases/database-identifiers#rules-for-regular-identifiers) and cannot contain `\`
	Name *string `pulumi:"name"`
	// Password for the login. Must follow strong password policies defined for SQL server. Passwords are case-sensitive, length must be 8-128 chars, can include all characters except `'` or `name`.
	Password *string `pulumi:"password"`
	// ID used to reference SQL Login in other resources, e.g. `server_role`. Can be retrieved from `sys.sql_logins`.
	PrincipalId *string `pulumi:"principalId"`
}

type SqlLoginState struct {
	// When `true`, password expiration policy is enforced for this login. Defaults to `false`. -> **Note** In case of Azure
	// SQL, which does not support this feature, the flag will be ignored.
	CheckPasswordExpiration pulumi.BoolPtrInput
	// When `true`, the Windows password policies of the computer on which SQL Server is running are enforced on this login.
	// Defaults to `true`. -> **Note** In case of Azure SQL, which does not support this feature, the flag will be ignored.
	CheckPasswordPolicy pulumi.BoolPtrInput
	// ID of login's default DB. The ID can be retrieved using `mssql_database` data resource. Defaults to ID of `master`. ->
	// **Note** In case of Azure SQL, which does not support this feature, the flag will be ignored.
	DefaultDatabaseId pulumi.StringPtrInput
	// Default language assigned to login. Defaults to current default language of the server. If the default language of the
	// server is later changed, the default language of the login remains unchanged. -> **Note** In case of Azure SQL, which
	// does not support this feature, the flag will be ignored.
	DefaultLanguage pulumi.StringPtrInput
	// When true, password change will be forced on first logon. Defaults to `false`. -> **Note** After password is changed,
	// this flag is being reset to `false`, which will show as changes in Terraform plan. Use `ignore_changes` block to prevent
	// this behavior. -> **Note** In case of Azure SQL, which does not support this feature, the flag will be ignored.
	MustChangePassword pulumi.BoolPtrInput
	// Login name. Must follow [Regular Identifiers rules](https://docs.microsoft.com/en-us/sql/relational-databases/databases/database-identifiers#rules-for-regular-identifiers) and cannot contain `\`
	Name pulumi.StringPtrInput
	// Password for the login. Must follow strong password policies defined for SQL server. Passwords are case-sensitive, length must be 8-128 chars, can include all characters except `'` or `name`.
	Password pulumi.StringPtrInput
	// ID used to reference SQL Login in other resources, e.g. `server_role`. Can be retrieved from `sys.sql_logins`.
	PrincipalId pulumi.StringPtrInput
}

func (SqlLoginState) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlLoginState)(nil)).Elem()
}

type sqlLoginArgs struct {
	// When `true`, password expiration policy is enforced for this login. Defaults to `false`. -> **Note** In case of Azure
	// SQL, which does not support this feature, the flag will be ignored.
	CheckPasswordExpiration *bool `pulumi:"checkPasswordExpiration"`
	// When `true`, the Windows password policies of the computer on which SQL Server is running are enforced on this login.
	// Defaults to `true`. -> **Note** In case of Azure SQL, which does not support this feature, the flag will be ignored.
	CheckPasswordPolicy *bool `pulumi:"checkPasswordPolicy"`
	// ID of login's default DB. The ID can be retrieved using `mssql_database` data resource. Defaults to ID of `master`. ->
	// **Note** In case of Azure SQL, which does not support this feature, the flag will be ignored.
	DefaultDatabaseId *string `pulumi:"defaultDatabaseId"`
	// Default language assigned to login. Defaults to current default language of the server. If the default language of the
	// server is later changed, the default language of the login remains unchanged. -> **Note** In case of Azure SQL, which
	// does not support this feature, the flag will be ignored.
	DefaultLanguage *string `pulumi:"defaultLanguage"`
	// When true, password change will be forced on first logon. Defaults to `false`. -> **Note** After password is changed,
	// this flag is being reset to `false`, which will show as changes in Terraform plan. Use `ignore_changes` block to prevent
	// this behavior. -> **Note** In case of Azure SQL, which does not support this feature, the flag will be ignored.
	MustChangePassword *bool `pulumi:"mustChangePassword"`
	// Login name. Must follow [Regular Identifiers rules](https://docs.microsoft.com/en-us/sql/relational-databases/databases/database-identifiers#rules-for-regular-identifiers) and cannot contain `\`
	Name string `pulumi:"name"`
	// Password for the login. Must follow strong password policies defined for SQL server. Passwords are case-sensitive, length must be 8-128 chars, can include all characters except `'` or `name`.
	Password string `pulumi:"password"`
}

// The set of arguments for constructing a SqlLogin resource.
type SqlLoginArgs struct {
	// When `true`, password expiration policy is enforced for this login. Defaults to `false`. -> **Note** In case of Azure
	// SQL, which does not support this feature, the flag will be ignored.
	CheckPasswordExpiration pulumi.BoolPtrInput
	// When `true`, the Windows password policies of the computer on which SQL Server is running are enforced on this login.
	// Defaults to `true`. -> **Note** In case of Azure SQL, which does not support this feature, the flag will be ignored.
	CheckPasswordPolicy pulumi.BoolPtrInput
	// ID of login's default DB. The ID can be retrieved using `mssql_database` data resource. Defaults to ID of `master`. ->
	// **Note** In case of Azure SQL, which does not support this feature, the flag will be ignored.
	DefaultDatabaseId pulumi.StringPtrInput
	// Default language assigned to login. Defaults to current default language of the server. If the default language of the
	// server is later changed, the default language of the login remains unchanged. -> **Note** In case of Azure SQL, which
	// does not support this feature, the flag will be ignored.
	DefaultLanguage pulumi.StringPtrInput
	// When true, password change will be forced on first logon. Defaults to `false`. -> **Note** After password is changed,
	// this flag is being reset to `false`, which will show as changes in Terraform plan. Use `ignore_changes` block to prevent
	// this behavior. -> **Note** In case of Azure SQL, which does not support this feature, the flag will be ignored.
	MustChangePassword pulumi.BoolPtrInput
	// Login name. Must follow [Regular Identifiers rules](https://docs.microsoft.com/en-us/sql/relational-databases/databases/database-identifiers#rules-for-regular-identifiers) and cannot contain `\`
	Name pulumi.StringInput
	// Password for the login. Must follow strong password policies defined for SQL server. Passwords are case-sensitive, length must be 8-128 chars, can include all characters except `'` or `name`.
	Password pulumi.StringInput
}

func (SqlLoginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlLoginArgs)(nil)).Elem()
}

type SqlLoginInput interface {
	pulumi.Input

	ToSqlLoginOutput() SqlLoginOutput
	ToSqlLoginOutputWithContext(ctx context.Context) SqlLoginOutput
}

func (*SqlLogin) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlLogin)(nil)).Elem()
}

func (i *SqlLogin) ToSqlLoginOutput() SqlLoginOutput {
	return i.ToSqlLoginOutputWithContext(context.Background())
}

func (i *SqlLogin) ToSqlLoginOutputWithContext(ctx context.Context) SqlLoginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlLoginOutput)
}

// SqlLoginArrayInput is an input type that accepts SqlLoginArray and SqlLoginArrayOutput values.
// You can construct a concrete instance of `SqlLoginArrayInput` via:
//
//	SqlLoginArray{ SqlLoginArgs{...} }
type SqlLoginArrayInput interface {
	pulumi.Input

	ToSqlLoginArrayOutput() SqlLoginArrayOutput
	ToSqlLoginArrayOutputWithContext(context.Context) SqlLoginArrayOutput
}

type SqlLoginArray []SqlLoginInput

func (SqlLoginArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SqlLogin)(nil)).Elem()
}

func (i SqlLoginArray) ToSqlLoginArrayOutput() SqlLoginArrayOutput {
	return i.ToSqlLoginArrayOutputWithContext(context.Background())
}

func (i SqlLoginArray) ToSqlLoginArrayOutputWithContext(ctx context.Context) SqlLoginArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlLoginArrayOutput)
}

// SqlLoginMapInput is an input type that accepts SqlLoginMap and SqlLoginMapOutput values.
// You can construct a concrete instance of `SqlLoginMapInput` via:
//
//	SqlLoginMap{ "key": SqlLoginArgs{...} }
type SqlLoginMapInput interface {
	pulumi.Input

	ToSqlLoginMapOutput() SqlLoginMapOutput
	ToSqlLoginMapOutputWithContext(context.Context) SqlLoginMapOutput
}

type SqlLoginMap map[string]SqlLoginInput

func (SqlLoginMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SqlLogin)(nil)).Elem()
}

func (i SqlLoginMap) ToSqlLoginMapOutput() SqlLoginMapOutput {
	return i.ToSqlLoginMapOutputWithContext(context.Background())
}

func (i SqlLoginMap) ToSqlLoginMapOutputWithContext(ctx context.Context) SqlLoginMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlLoginMapOutput)
}

type SqlLoginOutput struct{ *pulumi.OutputState }

func (SqlLoginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlLogin)(nil)).Elem()
}

func (o SqlLoginOutput) ToSqlLoginOutput() SqlLoginOutput {
	return o
}

func (o SqlLoginOutput) ToSqlLoginOutputWithContext(ctx context.Context) SqlLoginOutput {
	return o
}

// When `true`, password expiration policy is enforced for this login. Defaults to `false`. -> **Note** In case of Azure
// SQL, which does not support this feature, the flag will be ignored.
func (o SqlLoginOutput) CheckPasswordExpiration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SqlLogin) pulumi.BoolPtrOutput { return v.CheckPasswordExpiration }).(pulumi.BoolPtrOutput)
}

// When `true`, the Windows password policies of the computer on which SQL Server is running are enforced on this login.
// Defaults to `true`. -> **Note** In case of Azure SQL, which does not support this feature, the flag will be ignored.
func (o SqlLoginOutput) CheckPasswordPolicy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SqlLogin) pulumi.BoolPtrOutput { return v.CheckPasswordPolicy }).(pulumi.BoolPtrOutput)
}

// ID of login's default DB. The ID can be retrieved using `mssql_database` data resource. Defaults to ID of `master`. ->
// **Note** In case of Azure SQL, which does not support this feature, the flag will be ignored.
func (o SqlLoginOutput) DefaultDatabaseId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlLogin) pulumi.StringPtrOutput { return v.DefaultDatabaseId }).(pulumi.StringPtrOutput)
}

// Default language assigned to login. Defaults to current default language of the server. If the default language of the
// server is later changed, the default language of the login remains unchanged. -> **Note** In case of Azure SQL, which
// does not support this feature, the flag will be ignored.
func (o SqlLoginOutput) DefaultLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlLogin) pulumi.StringPtrOutput { return v.DefaultLanguage }).(pulumi.StringPtrOutput)
}

// When true, password change will be forced on first logon. Defaults to `false`. -> **Note** After password is changed,
// this flag is being reset to `false`, which will show as changes in Terraform plan. Use `ignore_changes` block to prevent
// this behavior. -> **Note** In case of Azure SQL, which does not support this feature, the flag will be ignored.
func (o SqlLoginOutput) MustChangePassword() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SqlLogin) pulumi.BoolPtrOutput { return v.MustChangePassword }).(pulumi.BoolPtrOutput)
}

// Login name. Must follow [Regular Identifiers rules](https://docs.microsoft.com/en-us/sql/relational-databases/databases/database-identifiers#rules-for-regular-identifiers) and cannot contain `\`
func (o SqlLoginOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlLogin) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Password for the login. Must follow strong password policies defined for SQL server. Passwords are case-sensitive, length must be 8-128 chars, can include all characters except `'` or `name`.
func (o SqlLoginOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlLogin) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// ID used to reference SQL Login in other resources, e.g. `server_role`. Can be retrieved from `sys.sql_logins`.
func (o SqlLoginOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlLogin) pulumi.StringOutput { return v.PrincipalId }).(pulumi.StringOutput)
}

type SqlLoginArrayOutput struct{ *pulumi.OutputState }

func (SqlLoginArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SqlLogin)(nil)).Elem()
}

func (o SqlLoginArrayOutput) ToSqlLoginArrayOutput() SqlLoginArrayOutput {
	return o
}

func (o SqlLoginArrayOutput) ToSqlLoginArrayOutputWithContext(ctx context.Context) SqlLoginArrayOutput {
	return o
}

func (o SqlLoginArrayOutput) Index(i pulumi.IntInput) SqlLoginOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SqlLogin {
		return vs[0].([]*SqlLogin)[vs[1].(int)]
	}).(SqlLoginOutput)
}

type SqlLoginMapOutput struct{ *pulumi.OutputState }

func (SqlLoginMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SqlLogin)(nil)).Elem()
}

func (o SqlLoginMapOutput) ToSqlLoginMapOutput() SqlLoginMapOutput {
	return o
}

func (o SqlLoginMapOutput) ToSqlLoginMapOutputWithContext(ctx context.Context) SqlLoginMapOutput {
	return o
}

func (o SqlLoginMapOutput) MapIndex(k pulumi.StringInput) SqlLoginOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SqlLogin {
		return vs[0].(map[string]*SqlLogin)[vs[1].(string)]
	}).(SqlLoginOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SqlLoginInput)(nil)).Elem(), &SqlLogin{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlLoginArrayInput)(nil)).Elem(), SqlLoginArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlLoginMapInput)(nil)).Elem(), SqlLoginMap{})
	pulumi.RegisterOutputType(SqlLoginOutput{})
	pulumi.RegisterOutputType(SqlLoginArrayOutput{})
	pulumi.RegisterOutputType(SqlLoginMapOutput{})
}
