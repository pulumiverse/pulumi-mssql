// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mssql

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-mssql/sdk/go/mssql/internal"
)

// Obtains information about all SQL users found in a database
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-mssql/sdk/go/mssql"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			master, err := mssql.LookupDatabase(ctx, &mssql.LookupDatabaseArgs{
//				Name: "master",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			example, err := mssql.GetSqlUsers(ctx, &mssql.GetSqlUsersArgs{
//				DatabaseId: pulumi.StringRef(master.Id),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("users", example.Users)
//			return nil
//		})
//	}
//
// ```
func GetSqlUsers(ctx *pulumi.Context, args *GetSqlUsersArgs, opts ...pulumi.InvokeOption) (*GetSqlUsersResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSqlUsersResult
	err := ctx.Invoke("mssql:index/getSqlUsers:getSqlUsers", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSqlUsers.
type GetSqlUsersArgs struct {
	// ID of database. Can be retrieved using `Database` or `SELECT DB_ID('<db_name>')`. Defaults to ID of `master`.
	DatabaseId *string `pulumi:"databaseId"`
}

// A collection of values returned by getSqlUsers.
type GetSqlUsersResult struct {
	// ID of database. Can be retrieved using `Database` or `SELECT DB_ID('<db_name>')`. Defaults to ID of `master`.
	DatabaseId *string `pulumi:"databaseId"`
	// ID of the resource, equals to database ID
	Id string `pulumi:"id"`
	// Set of SQL user objects
	Users []GetSqlUsersUser `pulumi:"users"`
}

func GetSqlUsersOutput(ctx *pulumi.Context, args GetSqlUsersOutputArgs, opts ...pulumi.InvokeOption) GetSqlUsersResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetSqlUsersResultOutput, error) {
			args := v.(GetSqlUsersArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetSqlUsersResult
			secret, err := ctx.InvokePackageRaw("mssql:index/getSqlUsers:getSqlUsers", args, &rv, "", opts...)
			if err != nil {
				return GetSqlUsersResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetSqlUsersResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetSqlUsersResultOutput), nil
			}
			return output, nil
		}).(GetSqlUsersResultOutput)
}

// A collection of arguments for invoking getSqlUsers.
type GetSqlUsersOutputArgs struct {
	// ID of database. Can be retrieved using `Database` or `SELECT DB_ID('<db_name>')`. Defaults to ID of `master`.
	DatabaseId pulumi.StringPtrInput `pulumi:"databaseId"`
}

func (GetSqlUsersOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSqlUsersArgs)(nil)).Elem()
}

// A collection of values returned by getSqlUsers.
type GetSqlUsersResultOutput struct{ *pulumi.OutputState }

func (GetSqlUsersResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSqlUsersResult)(nil)).Elem()
}

func (o GetSqlUsersResultOutput) ToGetSqlUsersResultOutput() GetSqlUsersResultOutput {
	return o
}

func (o GetSqlUsersResultOutput) ToGetSqlUsersResultOutputWithContext(ctx context.Context) GetSqlUsersResultOutput {
	return o
}

// ID of database. Can be retrieved using `Database` or `SELECT DB_ID('<db_name>')`. Defaults to ID of `master`.
func (o GetSqlUsersResultOutput) DatabaseId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSqlUsersResult) *string { return v.DatabaseId }).(pulumi.StringPtrOutput)
}

// ID of the resource, equals to database ID
func (o GetSqlUsersResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlUsersResult) string { return v.Id }).(pulumi.StringOutput)
}

// Set of SQL user objects
func (o GetSqlUsersResultOutput) Users() GetSqlUsersUserArrayOutput {
	return o.ApplyT(func(v GetSqlUsersResult) []GetSqlUsersUser { return v.Users }).(GetSqlUsersUserArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSqlUsersResultOutput{})
}
