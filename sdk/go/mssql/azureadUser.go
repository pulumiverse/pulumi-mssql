// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mssql

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Managed database-level user mapped to Azure AD identity (user or group).
//
// > **Note** When using this resource, Azure SQL server managed identity does not need any [AzureAD role assignments](https://docs.microsoft.com/en-us/azure/azure-sql/database/authentication-aad-service-principal?view=azuresql).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-mssql/sdk/go/mssql"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleDatabase, err := mssql.LookupDatabase(ctx, &mssql.LookupDatabaseArgs{
//				Name: "example",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleUser, err := azuread.LookupUser(ctx, &azuread.LookupUserArgs{
//				UserPrincipalName: pulumi.StringRef("user@example.com"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleAzureadUser, err := mssql.NewAzureadUser(ctx, "exampleAzureadUser", &mssql.AzureadUserArgs{
//				Name:         pulumi.String("example"),
//				DatabaseId:   *pulumi.String(exampleDatabase.Id),
//				UserObjectId: *pulumi.String(exampleUser.ObjectId),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("userId", exampleAzureadUser.ID())
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// import using <db_id>/<user_id> - can be retrieved using `SELECT CONCAT(DB_ID(), '/', principal_id) FROM sys.database_principals WHERE [name] = '<username>'`
//
// ```sh
//
//	$ pulumi import mssql:index/azureadUser:AzureadUser example '7/5'
//
// ```
type AzureadUser struct {
	pulumi.CustomResourceState

	// ID of database. Can be retrieved using `Database` or `SELECT DB_ID('<db_name>')`.
	DatabaseId pulumi.StringOutput `pulumi:"databaseId"`
	// User name. Cannot be longer than 128 chars.
	Name pulumi.StringOutput `pulumi:"name"`
	// Azure AD objectId of the user. This can be either regular user or a group.
	UserObjectId pulumi.StringOutput `pulumi:"userObjectId"`
}

// NewAzureadUser registers a new resource with the given unique name, arguments, and options.
func NewAzureadUser(ctx *pulumi.Context,
	name string, args *AzureadUserArgs, opts ...pulumi.ResourceOption) (*AzureadUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseId == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseId'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.UserObjectId == nil {
		return nil, errors.New("invalid value for required argument 'UserObjectId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AzureadUser
	err := ctx.RegisterResource("mssql:index/azureadUser:AzureadUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAzureadUser gets an existing AzureadUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAzureadUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AzureadUserState, opts ...pulumi.ResourceOption) (*AzureadUser, error) {
	var resource AzureadUser
	err := ctx.ReadResource("mssql:index/azureadUser:AzureadUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AzureadUser resources.
type azureadUserState struct {
	// ID of database. Can be retrieved using `Database` or `SELECT DB_ID('<db_name>')`.
	DatabaseId *string `pulumi:"databaseId"`
	// User name. Cannot be longer than 128 chars.
	Name *string `pulumi:"name"`
	// Azure AD objectId of the user. This can be either regular user or a group.
	UserObjectId *string `pulumi:"userObjectId"`
}

type AzureadUserState struct {
	// ID of database. Can be retrieved using `Database` or `SELECT DB_ID('<db_name>')`.
	DatabaseId pulumi.StringPtrInput
	// User name. Cannot be longer than 128 chars.
	Name pulumi.StringPtrInput
	// Azure AD objectId of the user. This can be either regular user or a group.
	UserObjectId pulumi.StringPtrInput
}

func (AzureadUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*azureadUserState)(nil)).Elem()
}

type azureadUserArgs struct {
	// ID of database. Can be retrieved using `Database` or `SELECT DB_ID('<db_name>')`.
	DatabaseId string `pulumi:"databaseId"`
	// User name. Cannot be longer than 128 chars.
	Name string `pulumi:"name"`
	// Azure AD objectId of the user. This can be either regular user or a group.
	UserObjectId string `pulumi:"userObjectId"`
}

// The set of arguments for constructing a AzureadUser resource.
type AzureadUserArgs struct {
	// ID of database. Can be retrieved using `Database` or `SELECT DB_ID('<db_name>')`.
	DatabaseId pulumi.StringInput
	// User name. Cannot be longer than 128 chars.
	Name pulumi.StringInput
	// Azure AD objectId of the user. This can be either regular user or a group.
	UserObjectId pulumi.StringInput
}

func (AzureadUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*azureadUserArgs)(nil)).Elem()
}

type AzureadUserInput interface {
	pulumi.Input

	ToAzureadUserOutput() AzureadUserOutput
	ToAzureadUserOutputWithContext(ctx context.Context) AzureadUserOutput
}

func (*AzureadUser) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureadUser)(nil)).Elem()
}

func (i *AzureadUser) ToAzureadUserOutput() AzureadUserOutput {
	return i.ToAzureadUserOutputWithContext(context.Background())
}

func (i *AzureadUser) ToAzureadUserOutputWithContext(ctx context.Context) AzureadUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureadUserOutput)
}

// AzureadUserArrayInput is an input type that accepts AzureadUserArray and AzureadUserArrayOutput values.
// You can construct a concrete instance of `AzureadUserArrayInput` via:
//
//	AzureadUserArray{ AzureadUserArgs{...} }
type AzureadUserArrayInput interface {
	pulumi.Input

	ToAzureadUserArrayOutput() AzureadUserArrayOutput
	ToAzureadUserArrayOutputWithContext(context.Context) AzureadUserArrayOutput
}

type AzureadUserArray []AzureadUserInput

func (AzureadUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzureadUser)(nil)).Elem()
}

func (i AzureadUserArray) ToAzureadUserArrayOutput() AzureadUserArrayOutput {
	return i.ToAzureadUserArrayOutputWithContext(context.Background())
}

func (i AzureadUserArray) ToAzureadUserArrayOutputWithContext(ctx context.Context) AzureadUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureadUserArrayOutput)
}

// AzureadUserMapInput is an input type that accepts AzureadUserMap and AzureadUserMapOutput values.
// You can construct a concrete instance of `AzureadUserMapInput` via:
//
//	AzureadUserMap{ "key": AzureadUserArgs{...} }
type AzureadUserMapInput interface {
	pulumi.Input

	ToAzureadUserMapOutput() AzureadUserMapOutput
	ToAzureadUserMapOutputWithContext(context.Context) AzureadUserMapOutput
}

type AzureadUserMap map[string]AzureadUserInput

func (AzureadUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzureadUser)(nil)).Elem()
}

func (i AzureadUserMap) ToAzureadUserMapOutput() AzureadUserMapOutput {
	return i.ToAzureadUserMapOutputWithContext(context.Background())
}

func (i AzureadUserMap) ToAzureadUserMapOutputWithContext(ctx context.Context) AzureadUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureadUserMapOutput)
}

type AzureadUserOutput struct{ *pulumi.OutputState }

func (AzureadUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureadUser)(nil)).Elem()
}

func (o AzureadUserOutput) ToAzureadUserOutput() AzureadUserOutput {
	return o
}

func (o AzureadUserOutput) ToAzureadUserOutputWithContext(ctx context.Context) AzureadUserOutput {
	return o
}

// ID of database. Can be retrieved using `Database` or `SELECT DB_ID('<db_name>')`.
func (o AzureadUserOutput) DatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureadUser) pulumi.StringOutput { return v.DatabaseId }).(pulumi.StringOutput)
}

// User name. Cannot be longer than 128 chars.
func (o AzureadUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureadUser) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Azure AD objectId of the user. This can be either regular user or a group.
func (o AzureadUserOutput) UserObjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *AzureadUser) pulumi.StringOutput { return v.UserObjectId }).(pulumi.StringOutput)
}

type AzureadUserArrayOutput struct{ *pulumi.OutputState }

func (AzureadUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AzureadUser)(nil)).Elem()
}

func (o AzureadUserArrayOutput) ToAzureadUserArrayOutput() AzureadUserArrayOutput {
	return o
}

func (o AzureadUserArrayOutput) ToAzureadUserArrayOutputWithContext(ctx context.Context) AzureadUserArrayOutput {
	return o
}

func (o AzureadUserArrayOutput) Index(i pulumi.IntInput) AzureadUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AzureadUser {
		return vs[0].([]*AzureadUser)[vs[1].(int)]
	}).(AzureadUserOutput)
}

type AzureadUserMapOutput struct{ *pulumi.OutputState }

func (AzureadUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AzureadUser)(nil)).Elem()
}

func (o AzureadUserMapOutput) ToAzureadUserMapOutput() AzureadUserMapOutput {
	return o
}

func (o AzureadUserMapOutput) ToAzureadUserMapOutputWithContext(ctx context.Context) AzureadUserMapOutput {
	return o
}

func (o AzureadUserMapOutput) MapIndex(k pulumi.StringInput) AzureadUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AzureadUser {
		return vs[0].(map[string]*AzureadUser)[vs[1].(string)]
	}).(AzureadUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AzureadUserInput)(nil)).Elem(), &AzureadUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureadUserArrayInput)(nil)).Elem(), AzureadUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzureadUserMapInput)(nil)).Elem(), AzureadUserMap{})
	pulumi.RegisterOutputType(AzureadUserOutput{})
	pulumi.RegisterOutputType(AzureadUserArrayOutput{})
	pulumi.RegisterOutputType(AzureadUserMapOutput{})
}
