// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mssql

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-mssql/sdk/go/mssql/internal"
)

// Manages database role membership.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-mssql/sdk/go/mssql"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleDatabase, err := mssql.LookupDatabase(ctx, &mssql.LookupDatabaseArgs{
//				Name: "example",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			owner, err := mssql.LookupSqlUser(ctx, &mssql.LookupSqlUserArgs{
//				Name:       "example_user",
//				DatabaseId: pulumi.StringRef(exampleDatabase.Id),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			member, err := mssql.LookupSqlUser(ctx, &mssql.LookupSqlUserArgs{
//				Name:       "member_user",
//				DatabaseId: pulumi.StringRef(exampleDatabase.Id),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleDatabaseRole, err := mssql.NewDatabaseRole(ctx, "exampleDatabaseRole", &mssql.DatabaseRoleArgs{
//				DatabaseId: pulumi.String(exampleDatabase.Id),
//				OwnerId:    pulumi.String(owner.Id),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = mssql.NewDatabaseRoleMember(ctx, "exampleDatabaseRoleMember", &mssql.DatabaseRoleMemberArgs{
//				RoleId:   exampleDatabaseRole.ID(),
//				MemberId: pulumi.String(member.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// import using <db_id>/<role_id> - can be retrieved using `SELECT CONCAT(DB_ID(), '/', DATABASE_PRINCIPAL_ID('<role_name>'), '/', DATABASE_PRINCIPAL_ID('<member_name'))`
//
// ```sh
// $ pulumi import mssql:index/databaseRoleMember:DatabaseRoleMember example '7/5/9'
// ```
type DatabaseRoleMember struct {
	pulumi.CustomResourceState

	// Can be either user or role ID in format `<database_id>/<member_id>`. Can be retrieved using `SqlUser` or `mssqlDatabaseMember`.
	MemberId pulumi.StringOutput `pulumi:"memberId"`
	// `<database_id>/<role_id>`
	RoleId pulumi.StringOutput `pulumi:"roleId"`
}

// NewDatabaseRoleMember registers a new resource with the given unique name, arguments, and options.
func NewDatabaseRoleMember(ctx *pulumi.Context,
	name string, args *DatabaseRoleMemberArgs, opts ...pulumi.ResourceOption) (*DatabaseRoleMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MemberId == nil {
		return nil, errors.New("invalid value for required argument 'MemberId'")
	}
	if args.RoleId == nil {
		return nil, errors.New("invalid value for required argument 'RoleId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DatabaseRoleMember
	err := ctx.RegisterResource("mssql:index/databaseRoleMember:DatabaseRoleMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabaseRoleMember gets an existing DatabaseRoleMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseRoleMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseRoleMemberState, opts ...pulumi.ResourceOption) (*DatabaseRoleMember, error) {
	var resource DatabaseRoleMember
	err := ctx.ReadResource("mssql:index/databaseRoleMember:DatabaseRoleMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabaseRoleMember resources.
type databaseRoleMemberState struct {
	// Can be either user or role ID in format `<database_id>/<member_id>`. Can be retrieved using `SqlUser` or `mssqlDatabaseMember`.
	MemberId *string `pulumi:"memberId"`
	// `<database_id>/<role_id>`
	RoleId *string `pulumi:"roleId"`
}

type DatabaseRoleMemberState struct {
	// Can be either user or role ID in format `<database_id>/<member_id>`. Can be retrieved using `SqlUser` or `mssqlDatabaseMember`.
	MemberId pulumi.StringPtrInput
	// `<database_id>/<role_id>`
	RoleId pulumi.StringPtrInput
}

func (DatabaseRoleMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseRoleMemberState)(nil)).Elem()
}

type databaseRoleMemberArgs struct {
	// Can be either user or role ID in format `<database_id>/<member_id>`. Can be retrieved using `SqlUser` or `mssqlDatabaseMember`.
	MemberId string `pulumi:"memberId"`
	// `<database_id>/<role_id>`
	RoleId string `pulumi:"roleId"`
}

// The set of arguments for constructing a DatabaseRoleMember resource.
type DatabaseRoleMemberArgs struct {
	// Can be either user or role ID in format `<database_id>/<member_id>`. Can be retrieved using `SqlUser` or `mssqlDatabaseMember`.
	MemberId pulumi.StringInput
	// `<database_id>/<role_id>`
	RoleId pulumi.StringInput
}

func (DatabaseRoleMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseRoleMemberArgs)(nil)).Elem()
}

type DatabaseRoleMemberInput interface {
	pulumi.Input

	ToDatabaseRoleMemberOutput() DatabaseRoleMemberOutput
	ToDatabaseRoleMemberOutputWithContext(ctx context.Context) DatabaseRoleMemberOutput
}

func (*DatabaseRoleMember) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseRoleMember)(nil)).Elem()
}

func (i *DatabaseRoleMember) ToDatabaseRoleMemberOutput() DatabaseRoleMemberOutput {
	return i.ToDatabaseRoleMemberOutputWithContext(context.Background())
}

func (i *DatabaseRoleMember) ToDatabaseRoleMemberOutputWithContext(ctx context.Context) DatabaseRoleMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseRoleMemberOutput)
}

// DatabaseRoleMemberArrayInput is an input type that accepts DatabaseRoleMemberArray and DatabaseRoleMemberArrayOutput values.
// You can construct a concrete instance of `DatabaseRoleMemberArrayInput` via:
//
//	DatabaseRoleMemberArray{ DatabaseRoleMemberArgs{...} }
type DatabaseRoleMemberArrayInput interface {
	pulumi.Input

	ToDatabaseRoleMemberArrayOutput() DatabaseRoleMemberArrayOutput
	ToDatabaseRoleMemberArrayOutputWithContext(context.Context) DatabaseRoleMemberArrayOutput
}

type DatabaseRoleMemberArray []DatabaseRoleMemberInput

func (DatabaseRoleMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseRoleMember)(nil)).Elem()
}

func (i DatabaseRoleMemberArray) ToDatabaseRoleMemberArrayOutput() DatabaseRoleMemberArrayOutput {
	return i.ToDatabaseRoleMemberArrayOutputWithContext(context.Background())
}

func (i DatabaseRoleMemberArray) ToDatabaseRoleMemberArrayOutputWithContext(ctx context.Context) DatabaseRoleMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseRoleMemberArrayOutput)
}

// DatabaseRoleMemberMapInput is an input type that accepts DatabaseRoleMemberMap and DatabaseRoleMemberMapOutput values.
// You can construct a concrete instance of `DatabaseRoleMemberMapInput` via:
//
//	DatabaseRoleMemberMap{ "key": DatabaseRoleMemberArgs{...} }
type DatabaseRoleMemberMapInput interface {
	pulumi.Input

	ToDatabaseRoleMemberMapOutput() DatabaseRoleMemberMapOutput
	ToDatabaseRoleMemberMapOutputWithContext(context.Context) DatabaseRoleMemberMapOutput
}

type DatabaseRoleMemberMap map[string]DatabaseRoleMemberInput

func (DatabaseRoleMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseRoleMember)(nil)).Elem()
}

func (i DatabaseRoleMemberMap) ToDatabaseRoleMemberMapOutput() DatabaseRoleMemberMapOutput {
	return i.ToDatabaseRoleMemberMapOutputWithContext(context.Background())
}

func (i DatabaseRoleMemberMap) ToDatabaseRoleMemberMapOutputWithContext(ctx context.Context) DatabaseRoleMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseRoleMemberMapOutput)
}

type DatabaseRoleMemberOutput struct{ *pulumi.OutputState }

func (DatabaseRoleMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseRoleMember)(nil)).Elem()
}

func (o DatabaseRoleMemberOutput) ToDatabaseRoleMemberOutput() DatabaseRoleMemberOutput {
	return o
}

func (o DatabaseRoleMemberOutput) ToDatabaseRoleMemberOutputWithContext(ctx context.Context) DatabaseRoleMemberOutput {
	return o
}

// Can be either user or role ID in format `<database_id>/<member_id>`. Can be retrieved using `SqlUser` or `mssqlDatabaseMember`.
func (o DatabaseRoleMemberOutput) MemberId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseRoleMember) pulumi.StringOutput { return v.MemberId }).(pulumi.StringOutput)
}

// `<database_id>/<role_id>`
func (o DatabaseRoleMemberOutput) RoleId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseRoleMember) pulumi.StringOutput { return v.RoleId }).(pulumi.StringOutput)
}

type DatabaseRoleMemberArrayOutput struct{ *pulumi.OutputState }

func (DatabaseRoleMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseRoleMember)(nil)).Elem()
}

func (o DatabaseRoleMemberArrayOutput) ToDatabaseRoleMemberArrayOutput() DatabaseRoleMemberArrayOutput {
	return o
}

func (o DatabaseRoleMemberArrayOutput) ToDatabaseRoleMemberArrayOutputWithContext(ctx context.Context) DatabaseRoleMemberArrayOutput {
	return o
}

func (o DatabaseRoleMemberArrayOutput) Index(i pulumi.IntInput) DatabaseRoleMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DatabaseRoleMember {
		return vs[0].([]*DatabaseRoleMember)[vs[1].(int)]
	}).(DatabaseRoleMemberOutput)
}

type DatabaseRoleMemberMapOutput struct{ *pulumi.OutputState }

func (DatabaseRoleMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseRoleMember)(nil)).Elem()
}

func (o DatabaseRoleMemberMapOutput) ToDatabaseRoleMemberMapOutput() DatabaseRoleMemberMapOutput {
	return o
}

func (o DatabaseRoleMemberMapOutput) ToDatabaseRoleMemberMapOutputWithContext(ctx context.Context) DatabaseRoleMemberMapOutput {
	return o
}

func (o DatabaseRoleMemberMapOutput) MapIndex(k pulumi.StringInput) DatabaseRoleMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DatabaseRoleMember {
		return vs[0].(map[string]*DatabaseRoleMember)[vs[1].(string)]
	}).(DatabaseRoleMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseRoleMemberInput)(nil)).Elem(), &DatabaseRoleMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseRoleMemberArrayInput)(nil)).Elem(), DatabaseRoleMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseRoleMemberMapInput)(nil)).Elem(), DatabaseRoleMemberMap{})
	pulumi.RegisterOutputType(DatabaseRoleMemberOutput{})
	pulumi.RegisterOutputType(DatabaseRoleMemberArrayOutput{})
	pulumi.RegisterOutputType(DatabaseRoleMemberMapOutput{})
}
